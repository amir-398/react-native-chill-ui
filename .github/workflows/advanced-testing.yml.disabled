name: Advanced Testing

on:
  schedule:
    # Run advanced testing daily at 4:00 AM UTC
    - cron: '0 4 * * *'
  push:
    branches: [main, develop, tests-branch]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      testing_type:
        description: 'Type of testing to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - performance
          - security
          - accessibility
          - compatibility
      testing_level:
        description: 'Level of testing to run'
        required: false
        default: 'standard'
        type: choice
        options:
          - basic
          - standard
          - comprehensive
          - exhaustive

jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.testing_type == 'all' || github.event.inputs.testing_type == 'unit'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Run unit tests
        id: unit-tests
        run: |
          echo "Running unit tests..."

          cd chill-ui-core

          # Run unit tests with coverage
          if bun run test --coverage; then
            echo "unit-test-status=passed" >> $GITHUB_OUTPUT
            echo "✅ Unit tests passed"
          else
            echo "unit-test-status=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Unit tests failed"
          fi

      - name: Analyze test coverage
        id: test-coverage
        run: |
          echo "Analyzing test coverage..."

          cd chill-ui-core

          # Check if coverage report exists
          if [ -f "coverage/coverage-summary.json" ]; then
            # Extract coverage metrics
            total_coverage=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
            functions_coverage=$(jq -r '.total.functions.pct' coverage/coverage-summary.json)
            branches_coverage=$(jq -r '.total.branches.pct' coverage/coverage-summary.json)
            statements_coverage=$(jq -r '.total.statements.pct' coverage/coverage-summary.json)
            
            echo "total-coverage=$total_coverage" >> $GITHUB_OUTPUT
            echo "functions-coverage=$functions_coverage" >> $GITHUB_OUTPUT
            echo "branches-coverage=$branches_coverage" >> $GITHUB_OUTPUT
            echo "statements-coverage=$statements_coverage" >> $GITHUB_OUTPUT
            
            echo "Total coverage: ${total_coverage}%"
            echo "Functions coverage: ${functions_coverage}%"
            echo "Branches coverage: ${branches_coverage}%"
            echo "Statements coverage: ${statements_coverage}%"
          else
            echo "⚠️ Coverage report not found"
            echo "total-coverage=0" >> $GITHUB_OUTPUT
            echo "functions-coverage=0" >> $GITHUB_OUTPUT
            echo "branches-coverage=0" >> $GITHUB_OUTPUT
            echo "statements-coverage=0" >> $GITHUB_OUTPUT
          fi

      - name: Run mutation testing
        if: github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive'
        run: |
          echo "Running mutation testing..."

          cd chill-ui-core

          # Run mutation testing
          echo "Mutation testing would be performed here"
          # This would use a tool like Stryker for mutation testing

      - name: Generate unit testing report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## 🧪 Unit Testing Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Test Results
            - **Status:** ${{ steps.unit-tests.outputs.unit-test-status === 'passed' ? '✅ Passed' : '❌ Failed' }}
            - **Total Coverage:** ${{ steps.test-coverage.outputs.total-coverage }}%
            - **Functions Coverage:** ${{ steps.test-coverage.outputs.functions-coverage }}%
            - **Branches Coverage:** ${{ steps.test-coverage.outputs.branches-coverage }}%
            - **Statements Coverage:** ${{ steps.test-coverage.outputs.statements-coverage }}%

            ### Testing Level
            - **Level:** ${{ github.event.inputs.testing_level || 'standard' }}
            - **Mutation Testing:** ${{ github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive' ? '✅ Performed' : '⏭️ Skipped' }}

            ### Quality Assessment
            ${{ steps.test-coverage.outputs.total-coverage >= 80 ? '🟢 **High Coverage** - Test coverage meets quality standards' : steps.test-coverage.outputs.total-coverage >= 60 ? '🟡 **Medium Coverage** - Test coverage needs improvement' : '🔴 **Low Coverage** - Test coverage is insufficient' }}

            ### Recommendations
            - Increase test coverage
            - Add edge case tests
            - Improve test quality
            - Implement mutation testing
            - Add property-based tests
            - Monitor coverage trends

            ---
            *This unit testing report was automatically generated.*`;

            // Create a discussion with the unit testing report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Unit Testing Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'testing'
            });

            console.log('Unit testing report generated successfully');

  integration-testing:
    name: Integration Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.testing_type == 'all' || github.event.inputs.testing_type == 'integration'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build library
        run: |
          bun run build

      - name: Run integration tests
        id: integration-tests
        run: |
          echo "Running integration tests..."

          cd chill-ui-core

          # Run integration tests
          if bun run test --testPathPattern=integration; then
            echo "integration-test-status=passed" >> $GITHUB_OUTPUT
            echo "✅ Integration tests passed"
          else
            echo "integration-test-status=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Integration tests failed"
          fi

      - name: Test component integration
        run: |
          echo "Testing component integration..."

          cd chill-ui-core

          # Test component integration
          echo "Testing component integration..."
          # This would test how components work together

      - name: Test API integration
        if: github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive'
        run: |
          echo "Testing API integration..."

          cd chill-ui-core

          # Test API integration
          echo "Testing API integration..."
          # This would test API integrations

      - name: Generate integration testing report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## 🔗 Integration Testing Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Test Results
            - **Status:** ${{ steps.integration-tests.outputs.integration-test-status === 'passed' ? '✅ Passed' : '❌ Failed' }}
            - **Component Integration:** ✅ Tested
            - **API Integration:** ${{ github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive' ? '✅ Tested' : '⏭️ Skipped' }}

            ### Testing Level
            - **Level:** ${{ github.event.inputs.testing_level || 'standard' }}

            ### Quality Assessment
            ${{ steps.integration-tests.outputs.integration-test-status === 'passed' ? '🟢 **Integration Passed** - All integration tests are passing' : '🔴 **Integration Failed** - Some integration tests are failing' }}

            ### Recommendations
            - Improve integration test coverage
            - Add end-to-end tests
            - Test component interactions
            - Validate API contracts
            - Monitor integration health

            ---
            *This integration testing report was automatically generated.*`;

            // Create a discussion with the integration testing report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Integration Testing Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'testing'
            });

            console.log('Integration testing report generated successfully');

  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.testing_type == 'all' || github.event.inputs.testing_type == 'performance'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build library
        run: |
          bun run build

      - name: Run performance tests
        id: performance-tests
        run: |
          echo "Running performance tests..."

          cd chill-ui-core

          # Run performance tests
          if bun run test --testPathPattern=performance; then
            echo "performance-test-status=passed" >> $GITHUB_OUTPUT
            echo "✅ Performance tests passed"
          else
            echo "performance-test-status=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Performance tests failed"
          fi

      - name: Measure bundle performance
        id: bundle-performance
        run: |
          echo "Measuring bundle performance..."

          # Measure bundle sizes
          for variant in lib lib-tw lib-ss; do
            if [ -d "$variant" ]; then
              for format in commonjs module typescript; do
                if [ -d "$variant/$format" ]; then
                  size=$(du -sb "$variant/$format" | cut -f1)
                  echo "$variant-$format-size=$size" >> $GITHUB_OUTPUT
                  echo "$variant-$format-size-kb=$(($size / 1024))" >> $GITHUB_OUTPUT
                  echo "Bundle $variant/$format: $(($size / 1024))KB"
                fi
              done
            fi
          done

      - name: Measure import performance
        id: import-performance
        run: |
          echo "Measuring import performance..."

          # Measure import time
          import_time=$(node -e "
            const start = process.hrtime.bigint();
            require('./lib/commonjs/index.js');
            const end = process.hrtime.bigint();
            console.log(Number(end - start) / 1000000);
          ")

          echo "import-time=$import_time" >> $GITHUB_OUTPUT
          echo "Import time: ${import_time}ms"

          # Measure memory usage
          memory_usage=$(node -e "
            const chillUI = require('./lib/commonjs/index.js');
            const used = process.memoryUsage();
            console.log(used.heapUsed / 1024 / 1024);
          ")

          echo "memory-usage=$memory_usage" >> $GITHUB_OUTPUT
          echo "Memory usage: ${memory_usage}MB"

      - name: Run load testing
        if: github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive'
        run: |
          echo "Running load testing..."

          cd chill-ui-core

          # Run load testing
          echo "Load testing would be performed here"
          # This would use a tool like Artillery or k6 for load testing

      - name: Generate performance testing report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## ⚡ Performance Testing Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Test Results
            - **Status:** ${{ steps.performance-tests.outputs.performance-test-status === 'passed' ? '✅ Passed' : '❌ Failed' }}
            - **Import Time:** ${{ steps.import-performance.outputs.import-time }}ms
            - **Memory Usage:** ${{ steps.import-performance.outputs.memory-usage }}MB

            ### Bundle Performance
            - **Core Library (CommonJS):** ${{ steps.bundle-performance.outputs.lib-commonjs-size-kb }}KB
            - **Core Library (Module):** ${{ steps.bundle-performance.outputs.lib-module-size-kb }}KB
            - **Core Library (TypeScript):** ${{ steps.bundle-performance.outputs.lib-typescript-size-kb }}KB
            - **Tailwind Variant (CommonJS):** ${{ steps.bundle-performance.outputs.lib-tw-commonjs-size-kb }}KB
            - **Tailwind Variant (Module):** ${{ steps.bundle-performance.outputs.lib-tw-module-size-kb }}KB
            - **Tailwind Variant (TypeScript):** ${{ steps.bundle-performance.outputs.lib-tw-typescript-size-kb }}KB
            - **Stylesheet Variant (CommonJS):** ${{ steps.bundle-performance.outputs.lib-ss-commonjs-size-kb }}KB
            - **Stylesheet Variant (Module):** ${{ steps.bundle-performance.outputs.lib-ss-module-size-kb }}KB
            - **Stylesheet Variant (TypeScript):** ${{ steps.bundle-performance.outputs.lib-ss-typescript-size-kb }}KB

            ### Testing Level
            - **Level:** ${{ github.event.inputs.testing_level || 'standard' }}
            - **Load Testing:** ${{ github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive' ? '✅ Performed' : '⏭️ Skipped' }}

            ### Performance Assessment
            ${{ steps.import-performance.outputs.import-time <= 100 && steps.import-performance.outputs.memory-usage <= 100 ? '🟢 **High Performance** - Performance meets quality standards' : '🟡 **Performance Issues** - Performance needs optimization' }}

            ### Recommendations
            - Optimize bundle sizes
            - Improve import performance
            - Reduce memory footprint
            - Implement performance monitoring
            - Add performance benchmarks
            - Monitor performance trends

            ---
            *This performance testing report was automatically generated.*`;

            // Create a discussion with the performance testing report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Performance Testing Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'testing'
            });

            console.log('Performance testing report generated successfully');

  security-testing:
    name: Security Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.testing_type == 'all' || github.event.inputs.testing_type == 'security'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Run security tests
        id: security-tests
        run: |
          echo "Running security tests..."

          cd chill-ui-core

          # Run security tests
          if bun run test --testPathPattern=security; then
            echo "security-test-status=passed" >> $GITHUB_OUTPUT
            echo "✅ Security tests passed"
          else
            echo "security-test-status=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Security tests failed"
          fi

      - name: Run security audit
        run: |
          echo "Running security audit..."

          cd chill-ui-core

          # Run security audit
          if bun audit --audit-level moderate; then
            echo "✅ Security audit passed"
          else
            echo "⚠️ Security audit failed"
          fi

      - name: Test for security vulnerabilities
        run: |
          echo "Testing for security vulnerabilities..."

          cd chill-ui-core

          # Test for common security vulnerabilities
          echo "Testing for security vulnerabilities..."
          # This would test for XSS, CSRF, injection attacks, etc.

      - name: Run penetration testing
        if: github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive'
        run: |
          echo "Running penetration testing..."

          cd chill-ui-core

          # Run penetration testing
          echo "Penetration testing would be performed here"
          # This would use tools like OWASP ZAP or Burp Suite

      - name: Generate security testing report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## 🔒 Security Testing Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Test Results
            - **Status:** ${{ steps.security-tests.outputs.security-test-status === 'passed' ? '✅ Passed' : '❌ Failed' }}
            - **Security Audit:** ✅ Performed
            - **Vulnerability Testing:** ✅ Performed
            - **Penetration Testing:** ${{ github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive' ? '✅ Performed' : '⏭️ Skipped' }}

            ### Testing Level
            - **Level:** ${{ github.event.inputs.testing_level || 'standard' }}

            ### Security Assessment
            ${{ steps.security-tests.outputs.security-test-status === 'passed' ? '🟢 **Secure** - All security tests passed' : '🔴 **Security Issues** - Some security tests failed' }}

            ### Recommendations
            - Fix security vulnerabilities
            - Implement security best practices
            - Regular security audits
            - Automated security scanning
            - Security training
            - Monitor security threats

            ---
            *This security testing report was automatically generated.*`;

            // Create a discussion with the security testing report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Testing Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'testing'
            });

            console.log('Security testing report generated successfully');

  accessibility-testing:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.testing_type == 'all' || github.event.inputs.testing_type == 'accessibility'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Run accessibility tests
        id: accessibility-tests
        run: |
          echo "Running accessibility tests..."

          cd chill-ui-core

          # Run accessibility tests
          if bun run test --testPathPattern=accessibility; then
            echo "accessibility-test-status=passed" >> $GITHUB_OUTPUT
            echo "✅ Accessibility tests passed"
          else
            echo "accessibility-test-status=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Accessibility tests failed"
          fi

      - name: Test WCAG compliance
        run: |
          echo "Testing WCAG compliance..."

          cd chill-ui-core

          # Test WCAG compliance
          echo "Testing WCAG compliance..."
          # This would test for WCAG 2.1 AA compliance

      - name: Test keyboard navigation
        run: |
          echo "Testing keyboard navigation..."

          cd chill-ui-core

          # Test keyboard navigation
          echo "Testing keyboard navigation..."
          # This would test keyboard accessibility

      - name: Test screen reader compatibility
        if: github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive'
        run: |
          echo "Testing screen reader compatibility..."

          cd chill-ui-core

          # Test screen reader compatibility
          echo "Testing screen reader compatibility..."
          # This would test screen reader compatibility

      - name: Generate accessibility testing report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## ♿ Accessibility Testing Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Test Results
            - **Status:** ${{ steps.accessibility-tests.outputs.accessibility-test-status === 'passed' ? '✅ Passed' : '❌ Failed' }}
            - **WCAG Compliance:** ✅ Tested
            - **Keyboard Navigation:** ✅ Tested
            - **Screen Reader Compatibility:** ${{ github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive' ? '✅ Tested' : '⏭️ Skipped' }}

            ### Testing Level
            - **Level:** ${{ github.event.inputs.testing_level || 'standard' }}

            ### Accessibility Assessment
            ${{ steps.accessibility-tests.outputs.accessibility-test-status === 'passed' ? '🟢 **Accessible** - All accessibility tests passed' : '🔴 **Accessibility Issues** - Some accessibility tests failed' }}

            ### Recommendations
            - Fix accessibility issues
            - Implement WCAG guidelines
            - Improve keyboard navigation
            - Enhance screen reader support
            - Regular accessibility audits
            - User testing with disabilities

            ---
            *This accessibility testing report was automatically generated.*`;

            // Create a discussion with the accessibility testing report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Accessibility Testing Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'testing'
            });

            console.log('Accessibility testing report generated successfully');

  compatibility-testing:
    name: Compatibility Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.testing_type == 'all' || github.event.inputs.testing_type == 'compatibility'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build library
        run: |
          bun run build

      - name: Test browser compatibility
        id: browser-compatibility
        run: |
          echo "Testing browser compatibility..."

          cd chill-ui-core

          # Test browser compatibility
          if bun run test --testPathPattern=browser; then
            echo "browser-compatibility-status=passed" >> $GITHUB_OUTPUT
            echo "✅ Browser compatibility tests passed"
          else
            echo "browser-compatibility-status=failed" >> $GITHUB_OUTPUT
            echo "⚠️ Browser compatibility tests failed"
          fi

      - name: Test React Native compatibility
        run: |
          echo "Testing React Native compatibility..."

          cd chill-ui-core

          # Test React Native compatibility
          echo "Testing React Native compatibility..."
          # This would test React Native specific functionality

      - name: Test TypeScript compatibility
        run: |
          echo "Testing TypeScript compatibility..."

          cd chill-ui-core

          # Test TypeScript compatibility
          if bun run ts:check; then
            echo "✅ TypeScript compatibility tests passed"
          else
            echo "⚠️ TypeScript compatibility tests failed"
          fi

      - name: Test cross-platform compatibility
        if: github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive'
        run: |
          echo "Testing cross-platform compatibility..."

          cd chill-ui-core

          # Test cross-platform compatibility
          echo "Testing cross-platform compatibility..."
          # This would test compatibility across different platforms

      - name: Generate compatibility testing report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## 🔄 Compatibility Testing Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Test Results
            - **Browser Compatibility:** ${{ steps.browser-compatibility.outputs.browser-compatibility-status === 'passed' ? '✅ Passed' : '❌ Failed' }}
            - **React Native Compatibility:** ✅ Tested
            - **TypeScript Compatibility:** ✅ Tested
            - **Cross-Platform Compatibility:** ${{ github.event.inputs.testing_level == 'comprehensive' || github.event.inputs.testing_level == 'exhaustive' ? '✅ Tested' : '⏭️ Skipped' }}

            ### Testing Level
            - **Level:** ${{ github.event.inputs.testing_level || 'standard' }}

            ### Compatibility Assessment
            ${{ steps.browser-compatibility.outputs.browser-compatibility-status === 'passed' ? '🟢 **Compatible** - All compatibility tests passed' : '🔴 **Compatibility Issues** - Some compatibility tests failed' }}

            ### Recommendations
            - Fix compatibility issues
            - Test on multiple browsers
            - Validate React Native support
            - Ensure TypeScript compatibility
            - Test cross-platform functionality
            - Monitor compatibility trends

            ---
            *This compatibility testing report was automatically generated.*`;

            // Create a discussion with the compatibility testing report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Compatibility Testing Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'testing'
            });

            console.log('Compatibility testing report generated successfully');

  testing-summary:
    name: Testing Summary
    runs-on: ubuntu-latest
    needs:
      [
        unit-testing,
        integration-testing,
        performance-testing,
        security-testing,
        accessibility-testing,
        compatibility-testing,
      ]
    if: always()

    steps:
      - name: Generate testing summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🧪 Advanced Testing Summary

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Testing Results
            - **Unit Testing:** ${{ needs.unit-testing.result === 'success' ? '✅ Completed' : '❌ Failed' }}
            - **Integration Testing:** ${{ needs.integration-testing.result === 'success' ? '✅ Completed' : '❌ Failed' }}
            - **Performance Testing:** ${{ needs.performance-testing.result === 'success' ? '✅ Completed' : '❌ Failed' }}
            - **Security Testing:** ${{ needs.security-testing.result === 'success' ? '✅ Completed' : '❌ Failed' }}
            - **Accessibility Testing:** ${{ needs.accessibility-testing.result === 'success' ? '✅ Completed' : '❌ Failed' }}
            - **Compatibility Testing:** ${{ needs.compatibility-testing.result === 'success' ? '✅ Completed' : '❌ Failed' }}

            ### Testing Configuration
            - **Type:** ${{ github.event.inputs.testing_type || 'all' }}
            - **Level:** ${{ github.event.inputs.testing_level || 'standard' }}

            ### Overall Status
            ${{ needs.unit-testing.result === 'success' && needs.integration-testing.result === 'success' && needs.performance-testing.result === 'success' && needs.security-testing.result === 'success' && needs.accessibility-testing.result === 'success' && needs.compatibility-testing.result === 'success' ? '🟢 **All Tests Passed** - All testing categories completed successfully' : '🟡 **Some Tests Failed** - Some testing categories failed' }}

            ### Next Steps
            - Review individual testing reports
            - Address any identified issues
            - Improve test coverage
            - Enhance test quality
            - Monitor testing trends

            ---
            *This advanced testing summary was automatically generated.*`;

            // Create a discussion with the testing summary
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Advanced Testing Summary - ${new Date().toLocaleDateString()}`,
              body: summary,
              category: 'testing'
            });

            console.log('Advanced testing summary generated successfully');

      - name: Alert on testing failures
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            const alert = `🚨 **Testing Failures Alert**

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Failed Testing Categories
            ${{ needs.unit-testing.result !== 'success' ? '- Unit testing failed' : '' }}
            ${{ needs.integration-testing.result !== 'success' ? '- Integration testing failed' : '' }}
            ${{ needs.performance-testing.result !== 'success' ? '- Performance testing failed' : '' }}
            ${{ needs.security-testing.result !== 'success' ? '- Security testing failed' : '' }}
            ${{ needs.accessibility-testing.result !== 'success' ? '- Accessibility testing failed' : '' }}
            ${{ needs.compatibility-testing.result !== 'success' ? '- Compatibility testing failed' : '' }}

            ### Details
            - **Repository:** ${{ github.repository }}
            - **Run ID:** ${{ github.run_id }}
            - **Testing Type:** ${{ github.event.inputs.testing_type || 'all' }}
            - **Testing Level:** ${{ github.event.inputs.testing_level || 'standard' }}

            🔗 [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *This is an automated testing failures alert.*`;

            // You can add Slack/Discord webhook notifications here
            console.log(`Testing failures alert: ${alert}`);

            // Create an issue for testing failures
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Testing Failures Alert - ${new Date().toLocaleDateString()}`,
              body: alert,
              labels: ['testing', 'priority: high']
            });
