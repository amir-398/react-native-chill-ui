name: Maintenance

on:
  schedule:
    # Run maintenance tasks weekly on Sunday at 3:00 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

jobs:
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Clean build artifacts
        run: |
          echo "Cleaning build artifacts..."
          bun run clean

      - name: Clean node_modules
        run: |
          echo "Cleaning node_modules..."
          rm -rf node_modules
          rm -rf chill-ui-core/node_modules

      - name: Clean cache
        run: |
          echo "Cleaning cache..."
          bun pm cache rm
          npm cache clean --force

      - name: Clean temporary files
        run: |
          echo "Cleaning temporary files..."
          find . -name "*.log" -delete
          find . -name "*.tmp" -delete
          find . -name ".DS_Store" -delete
          find . -name "Thumbs.db" -delete

      - name: Clean coverage reports
        run: |
          echo "Cleaning coverage reports..."
          rm -rf chill-ui-core/coverage
          rm -rf coverage

      - name: Clean test artifacts
        run: |
          echo "Cleaning test artifacts..."
          rm -rf chill-ui-core/.nyc_output
          rm -rf .nyc_output

  dependency-maintenance:
    name: Dependency Maintenance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Update dependencies
        run: |
          cd chill-ui-core
          echo "Updating dependencies..."

          # Update all dependencies to latest versions
          bun update

          # Check for outdated dependencies
          bun outdated || true

      - name: Audit dependencies
        run: |
          cd chill-ui-core
          echo "Auditing dependencies..."

          # Run security audit
          bun audit --audit-level moderate

      - name: Check for duplicate dependencies
        run: |
          cd chill-ui-core
          echo "Checking for duplicate dependencies..."

          # Check for duplicate dependencies
          bun pm ls --json | jq -r '.[] | select(.dependencies | length > 0) | .dependencies[] | .name' | sort | uniq -d || echo "No duplicate dependencies found"

      - name: Check for unused dependencies
        run: |
          cd chill-ui-core
          echo "Checking for unused dependencies..."

          # Check for unused dependencies
          npx depcheck || true

  code-maintenance:
    name: Code Maintenance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Format code
        run: |
          cd chill-ui-core
          echo "Formatting code..."
          bun run format

      - name: Fix linting issues
        run: |
          cd chill-ui-core
          echo "Fixing linting issues..."
          bun run lint --fix

      - name: Check for dead code
        run: |
          cd chill-ui-core
          echo "Checking for dead code..."

          # Check for unused exports
          find src/ -name "*.ts" -o -name "*.tsx" | while read file; do
            # Simple check for unused exports
            grep -n "export" "$file" | while read line; do
              export_name=$(echo "$line" | sed 's/.*export[[:space:]]*\([^=]*\).*/\1/')
              if [ -n "$export_name" ]; then
                if ! grep -r "$export_name" src/ --include="*.ts" --include="*.tsx" | grep -v "$file" | grep -q "$export_name"; then
                  echo "Potentially unused export in $file: $export_name"
                fi
              fi
            done
          done

      - name: Check for TODO/FIXME comments
        run: |
          cd chill-ui-core
          echo "Checking for TODO/FIXME comments..."

          todo_count=$(grep -r "TODO\|FIXME" src/ --include="*.ts" --include="*.tsx" | wc -l)
          echo "Found $todo_count TODO/FIXME comments"

          if [ $todo_count -gt 0 ]; then
            echo "TODO/FIXME comments found:"
            grep -r "TODO\|FIXME" src/ --include="*.ts" --include="*.tsx" | head -10
          fi

  documentation-maintenance:
    name: Documentation Maintenance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Check documentation links
        run: |
          echo "Checking documentation links..."

          # Check for broken links in README files
          find . -name "README.md" | while read file; do
            echo "Checking links in $file"
            # Simple check for common link patterns
            grep -n "http" "$file" | while read line; do
              url=$(echo "$line" | sed 's/.*http[^[:space:]]*//')
              if [ -n "$url" ]; then
                if ! curl -s --head "$url" | head -n 1 | grep -q "200 OK"; then
                  echo "‚ö†Ô∏è Potentially broken link in $file: $url"
                fi
              fi
            done
          done

      - name: Check documentation consistency
        run: |
          echo "Checking documentation consistency..."

          # Check if all components have README files
          find chill-ui-core/src/components -type d -mindepth 1 -maxdepth 1 | while read dir; do
            component_name=$(basename "$dir")
            readme_file="$dir/README.md"
            
            if [ ! -f "$readme_file" ]; then
              echo "‚ö†Ô∏è Missing README for component: $component_name"
            else
              # Check if README has required sections
              if ! grep -q "## Usage" "$readme_file"; then
                echo "‚ö†Ô∏è README for $component_name missing Usage section"
              fi
              if ! grep -q "## Props" "$readme_file"; then
                echo "‚ö†Ô∏è README for $component_name missing Props section"
              fi
            fi
          done

      - name: Update documentation timestamps
        run: |
          echo "Updating documentation timestamps..."

          # Update timestamps in documentation files
          find . -name "*.md" | while read file; do
            if grep -q "Last Updated" "$file"; then
              sed -i "s/Last Updated:.*/Last Updated: $(date +%B %Y)/" "$file"
            fi
          done

  performance-maintenance:
    name: Performance Maintenance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build library
        run: |
          bun run build

      - name: Analyze bundle size
        run: |
          echo "Analyzing bundle size..."

          # Check bundle sizes
          for file in lib/*/index.js lib-tw/*/index.js lib-ss/*/index.js; do
            if [ -f "$file" ]; then
              size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
              size_kb=$((size / 1024))
              echo "$file: ${size_kb}KB"
              
              # Alert if bundle is too large
              if [ $size_kb -gt 500 ]; then
                echo "‚ö†Ô∏è Bundle $file is larger than 500KB: ${size_kb}KB"
              fi
            fi
          done

      - name: Check for performance issues
        run: |
          echo "Checking for performance issues..."

          # Check for common performance anti-patterns
          find chill-ui-core/src/ -name "*.ts" -o -name "*.tsx" | while read file; do
            # Check for excessive re-renders
            if grep -q "useEffect.*\[\]" "$file"; then
              echo "‚ö†Ô∏è Potential performance issue in $file: useEffect with empty dependency array"
            fi
            
            # Check for inline functions
            if grep -q "onClick.*=>" "$file"; then
              echo "‚ö†Ô∏è Potential performance issue in $file: Inline function in JSX"
            fi
          done

  maintenance-report:
    name: Maintenance Report
    runs-on: ubuntu-latest
    needs: [cleanup, dependency-maintenance, code-maintenance, documentation-maintenance, performance-maintenance]
    if: always()

    steps:
      - name: Generate maintenance report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üîß Maintenance Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Maintenance Tasks
            - **Cleanup:** ${{ needs.cleanup.result === 'success' ? '‚úÖ Success' : '‚ùå Failed' }}
            - **Dependency Maintenance:** ${{ needs.dependency-maintenance.result === 'success' ? '‚úÖ Success' : '‚ùå Failed' }}
            - **Code Maintenance:** ${{ needs.code-maintenance.result === 'success' ? '‚úÖ Success' : '‚ùå Failed' }}
            - **Documentation Maintenance:** ${{ needs.documentation-maintenance.result === 'success' ? '‚úÖ Success' : '‚ùå Failed' }}
            - **Performance Maintenance:** ${{ needs.performance-maintenance.result === 'success' ? '‚úÖ Success' : '‚ùå Failed' }}

            ### Summary
            ${{ needs.cleanup.result === 'success' && needs.dependency-maintenance.result === 'success' && needs.code-maintenance.result === 'success' && needs.documentation-maintenance.result === 'success' && needs.performance-maintenance.result === 'success' ? '‚úÖ All maintenance tasks completed successfully' : '‚ö†Ô∏è Some maintenance tasks failed' }}

            ### Recommendations
            - Continue regular maintenance schedule
            - Address any failed tasks
            - Monitor performance metrics
            - Keep dependencies updated
            - Maintain code quality standards

            ---
            *This maintenance report was automatically generated.*`;

            // Create a discussion with the maintenance report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Maintenance Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'general'
            });

            console.log('Maintenance report generated successfully');

      - name: Alert on maintenance failure
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            const alert = `üö® **Maintenance Failure Alert**

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Failed Tasks
            ${{ needs.cleanup.result !== 'success' ? '- Cleanup failed' : '' }}
            ${{ needs.dependency-maintenance.result !== 'success' ? '- Dependency maintenance failed' : '' }}
            ${{ needs.code-maintenance.result !== 'success' ? '- Code maintenance failed' : '' }}
            ${{ needs.documentation-maintenance.result !== 'success' ? '- Documentation maintenance failed' : '' }}
            ${{ needs.performance-maintenance.result !== 'success' ? '- Performance maintenance failed' : '' }}

            ### Details
            - **Repository:** ${{ github.repository }}
            - **Commit:** ${{ github.sha }}
            - **Run ID:** ${{ github.run_id }}

            üîó [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *This is an automated maintenance failure alert.*`;

            // You can add Slack/Discord webhook notifications here
            console.log(`Maintenance failure alert: ${alert}`);

            // Create an issue for maintenance failures
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Maintenance Failure - ${new Date().toLocaleDateString()}`,
              body: alert,
              labels: ['maintenance', 'priority: medium']
            });
