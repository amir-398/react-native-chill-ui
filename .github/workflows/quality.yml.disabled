name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run quality checks daily at 1:00 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Run ESLint
      run: |
        cd chill-ui-core
        echo "Running ESLint..."
        bun run lint
        
    - name: Run Prettier check
      run: |
        cd chill-ui-core
        echo "Running Prettier check..."
        bun run format --check
        
    - name: Run TypeScript check
      run: |
        cd chill-ui-core
        echo "Running TypeScript check..."
        bun run ts:check
        
    - name: Check code complexity
      run: |
        cd chill-ui-core
        echo "Checking code complexity..."
        
        # Install complexity checker
        npm install -g complexity-report
        
        # Check complexity
        complexity-report --format json --output complexity-report.json src/ || true
        
        # Check for high complexity functions
        if [ -f "complexity-report.json" ]; then
          echo "Complexity report generated"
          cat complexity-report.json | jq '.results[] | select(.complexity > 10)' || echo "No high complexity functions found"
        fi
        
    - name: Check for code smells
      run: |
        cd chill-ui-core
        echo "Checking for code smells..."
        
        # Check for long functions
        find src/ -name "*.ts" -o -name "*.tsx" | xargs wc -l | awk '$1 > 100 {print "Long function: " $2 " (" $1 " lines)"}'
        
        # Check for deep nesting
        find src/ -name "*.ts" -o -name "*.tsx" | xargs grep -n "}" | awk -F: '{print $1 ":" $2}' | while read file line; do
          depth=$(sed -n "1,${line}p" "$file" | grep -o "{" | wc -l)
          if [ $depth -gt 5 ]; then
            echo "Deep nesting in $file at line $line (depth: $depth)"
          fi
        done
        
    - name: Check for unused code
      run: |
        cd chill-ui-core
        echo "Checking for unused code..."
        
        # Check for unused imports
        find src/ -name "*.ts" -o -name "*.tsx" | while read file; do
          # Simple check for unused imports (this is a basic implementation)
          grep -n "import.*from" "$file" | while read line; do
            import_name=$(echo "$line" | sed 's/.*import[[:space:]]*{[[:space:]]*\([^}]*\)[[:space:]]*}.*/\1/')
            if [ -n "$import_name" ]; then
              if ! grep -q "$import_name" "$file"; then
                echo "Potentially unused import in $file: $import_name"
              fi
            fi
          done
        done
        
    - name: Generate quality report
      run: |
        echo "## Code Quality Report" > quality-report.md
        echo "" >> quality-report.md
        echo "**Date:** $(date)" >> quality-report.md
        echo "" >> quality-report.md
        echo "### Quality Checks" >> quality-report.md
        echo "- ✅ ESLint: Passed" >> quality-report.md
        echo "- ✅ Prettier: Passed" >> quality-report.md
        echo "- ✅ TypeScript: Passed" >> quality-report.md
        echo "- ✅ Code Complexity: Checked" >> quality-report.md
        echo "- ✅ Code Smells: Checked" >> quality-report.md
        echo "" >> quality-report.md
        echo "### Recommendations" >> quality-report.md
        echo "- Keep functions under 100 lines" >> quality-report.md
        echo "- Avoid deep nesting (max 5 levels)" >> quality-report.md
        echo "- Remove unused imports and variables" >> quality-report.md
        echo "- Use meaningful variable names" >> quality-report.md
        
        cat quality-report.md
        
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: quality-report.md
        retention-days: 30

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Run tests with coverage
      run: |
        cd chill-ui-core
        echo "Running tests with coverage..."
        bun run test:coverage
        
    - name: Analyze coverage
      run: |
        cd chill-ui-core
        echo "Analyzing test coverage..."
        
        if [ -f "coverage/coverage-summary.json" ]; then
          echo "Coverage summary:"
          cat coverage/coverage-summary.json | jq '.total'
          
          # Check if coverage meets threshold
          coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "⚠️ Coverage is below 80% threshold: ${coverage}%"
            exit 1
          else
            echo "✅ Coverage meets threshold: ${coverage}%"
          fi
        else
          echo "No coverage report found"
        fi
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: chill-ui-core/coverage/
        retention-days: 30

  maintainability:
    name: Maintainability Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Check documentation coverage
      run: |
        cd chill-ui-core
        echo "Checking documentation coverage..."
        
        # Count total components
        total_components=$(find src/components -type d -mindepth 1 -maxdepth 1 | wc -l)
        
        # Count components with README
        documented_components=$(find src/components -name "README.md" | wc -l)
        
        # Count components with stories
        story_components=$(find stories -name "*.stories.tsx" | wc -l)
        
        echo "Total components: $total_components"
        echo "Documented components: $documented_components"
        echo "Components with stories: $story_components"
        
        # Calculate documentation percentage
        doc_percentage=$((documented_components * 100 / total_components))
        story_percentage=$((story_components * 100 / total_components))
        
        echo "Documentation coverage: ${doc_percentage}%"
        echo "Story coverage: ${story_percentage}%"
        
        # Check if documentation meets threshold
        if [ $doc_percentage -lt 80 ]; then
          echo "⚠️ Documentation coverage is below 80% threshold: ${doc_percentage}%"
          exit 1
        else
          echo "✅ Documentation coverage meets threshold: ${doc_percentage}%"
        fi
        
    - name: Check for TODO/FIXME comments
      run: |
        cd chill-ui-core
        echo "Checking for TODO/FIXME comments..."
        
        todo_count=$(grep -r "TODO\|FIXME" src/ --include="*.ts" --include="*.tsx" | wc -l)
        echo "Found $todo_count TODO/FIXME comments"
        
        if [ $todo_count -gt 10 ]; then
          echo "⚠️ Too many TODO/FIXME comments: $todo_count"
          echo "Consider addressing these items:"
          grep -r "TODO\|FIXME" src/ --include="*.ts" --include="*.tsx" | head -10
        else
          echo "✅ TODO/FIXME count is acceptable: $todo_count"
        fi
        
    - name: Check for deprecated patterns
      run: |
        cd chill-ui-core
        echo "Checking for deprecated patterns..."
        
        # Check for deprecated React patterns
        deprecated_patterns=(
          "componentWillMount"
          "componentWillReceiveProps"
          "componentWillUpdate"
          "UNSAFE_"
        )
        
        for pattern in "${deprecated_patterns[@]}"; do
          count=$(grep -r "$pattern" src/ --include="*.ts" --include="*.tsx" | wc -l)
          if [ $count -gt 0 ]; then
            echo "⚠️ Found $count instances of deprecated pattern: $pattern"
          fi
        done
        
    - name: Generate maintainability report
      run: |
        echo "## Maintainability Report" > maintainability-report.md
        echo "" >> maintainability-report.md
        echo "**Date:** $(date)" >> maintainability-report.md
        echo "" >> maintainability-report.md
        echo "### Documentation" >> maintainability-report.md
        echo "- **Coverage:** ${doc_percentage}%" >> maintainability-report.md
        echo "- **Stories:** ${story_percentage}%" >> maintainability-report.md
        echo "" >> maintainability-report.md
        echo "### Code Quality" >> maintainability-report.md
        echo "- **TODO/FIXME:** $todo_count" >> maintainability-report.md
        echo "- **Deprecated Patterns:** Checked" >> maintainability-report.md
        echo "" >> maintainability-report.md
        echo "### Recommendations" >> maintainability-report.md
        echo "- Maintain documentation coverage above 80%" >> maintainability-report.md
        echo "- Address TODO/FIXME comments regularly" >> maintainability-report.md
        echo "- Avoid deprecated React patterns" >> maintainability-report.md
        echo "- Keep components focused and single-purpose" >> maintainability-report.md
        
        cat maintainability-report.md
        
    - name: Upload maintainability report
      uses: actions/upload-artifact@v4
      with:
        name: maintainability-report
        path: maintainability-report.md
        retention-days: 30

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test-coverage]
    if: always()
    
    steps:
    - name: Check quality gate
      run: |
        echo "Checking quality gate..."
        
        # Check if all quality checks passed
        if [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.test-coverage.result }}" = "success" ]; then
          echo "✅ Quality gate passed"
          exit 0
        else
          echo "❌ Quality gate failed"
          echo "Code quality: ${{ needs.code-quality.result }}"
          echo "Test coverage: ${{ needs.test-coverage.result }}"
          exit 1
        fi
        
    - name: Comment quality results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const comment = `## 🎯 Quality Gate Results
          
          ### Code Quality
          - **ESLint:** ${{ needs.code-quality.result === 'success' ? '✅ Passed' : '❌ Failed' }}
          - **Prettier:** ${{ needs.code-quality.result === 'success' ? '✅ Passed' : '❌ Failed' }}
          - **TypeScript:** ${{ needs.code-quality.result === 'success' ? '✅ Passed' : '❌ Failed' }}
          
          ### Test Coverage
          - **Coverage:** ${{ needs.test-coverage.result === 'success' ? '✅ Passed' : '❌ Failed' }}
          - **Threshold:** 80%
          
          ### Overall Status
          ${{ needs.code-quality.result === 'success' && needs.test-coverage.result === 'success' ? '✅ **Quality Gate Passed**' : '❌ **Quality Gate Failed**' }}
          
          ---
          *This is an automated quality check.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });
