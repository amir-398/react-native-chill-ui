name: Monitoring

on:
  schedule:
    # Run monitoring checks every hour
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        
        # Check if the library can be imported
        node -e "
          try {
            const chillUI = require('./lib/commonjs/index.js');
            console.log('‚úÖ Library can be imported successfully');
            console.log('Available exports:', Object.keys(chillUI));
          } catch (error) {
            console.error('‚ùå Library import failed:', error.message);
            process.exit(1);
          }
        "
        
        # Check if all variants can be imported
        for variant in lib lib-tw lib-ss; do
          if [ -d "$variant" ]; then
            echo "Checking $variant variant..."
            node -e "
              try {
                const variant = require('./$variant/commonjs/index.js');
                console.log('‚úÖ $variant variant can be imported');
              } catch (error) {
                console.error('‚ùå $variant variant import failed:', error.message);
                process.exit(1);
              }
            "
          fi
        done
        
    - name: Check build integrity
      run: |
        echo "Checking build integrity..."
        
        # Check if all required files exist
        required_files=(
          "lib/commonjs/index.js"
          "lib/module/index.js"
          "lib/typescript/index.d.ts"
          "lib-tw/commonjs/index.js"
          "lib-tw/module/index.js"
          "lib-tw/typescript/index.d.ts"
          "lib-ss/commonjs/index.js"
          "lib-ss/module/index.js"
          "lib-ss/typescript/index.d.ts"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file is missing"
            exit 1
          fi
        done
        
    - name: Check file sizes
      run: |
        echo "Checking file sizes..."
        
        # Check if files are not too large
        max_size=1048576  # 1MB
        
        for file in lib/*/index.js lib-tw/*/index.js lib-ss/*/index.js; do
          if [ -f "$file" ]; then
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
            if [ "$size" -gt "$max_size" ]; then
              echo "‚ö†Ô∏è $file is larger than 1MB: $(($size / 1024 / 1024))MB"
            else
              echo "‚úÖ $file size is acceptable: $(($size / 1024))KB"
            fi
          fi
        done

  dependency-monitoring:
    name: Dependency Monitoring
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Check for outdated dependencies
      run: |
        cd chill-ui-core
        echo "Checking for outdated dependencies..."
        
        # Check for outdated dependencies
        outdated=$(bun outdated --json 2>/dev/null || echo "[]")
        outdated_count=$(echo "$outdated" | jq length)
        
        if [ "$outdated_count" -gt 0 ]; then
          echo "‚ö†Ô∏è Found $outdated_count outdated dependencies:"
          echo "$outdated" | jq -r '.[] | "\(.name): \(.current) -> \(.latest)"'
        else
          echo "‚úÖ All dependencies are up to date"
        fi
        
    - name: Check for security vulnerabilities
      run: |
        cd chill-ui-core
        echo "Checking for security vulnerabilities..."
        
        # Run security audit
        if bun audit --audit-level moderate; then
          echo "‚úÖ No security vulnerabilities found"
        else
          echo "‚ö†Ô∏è Security vulnerabilities detected"
          exit 1
        fi
        
    - name: Check for license issues
      run: |
        cd chill-ui-core
        echo "Checking for license issues..."
        
        # Check for problematic licenses
        problematic_licenses=("GPL" "AGPL" "LGPL" "Copyleft")
        
        for license in "${problematic_licenses[@]}"; do
          if grep -r -i "$license" node_modules/ --include="package.json" | grep -q "license"; then
            echo "‚ö†Ô∏è Found potentially problematic license: $license"
          fi
        done
        
        echo "‚úÖ License check completed"

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Build library
      run: |
        bun run build
        
    - name: Measure import performance
      run: |
        echo "Measuring import performance..."
        
        # Measure import time
        import_time=$(node -e "
          const start = process.hrtime.bigint();
          require('./lib/commonjs/index.js');
          const end = process.hrtime.bigint();
          console.log(Number(end - start) / 1000000);
        ")
        
        echo "Import time: ${import_time}ms"
        
        # Check if import time is acceptable
        if (( $(echo "$import_time > 100" | bc -l) )); then
          echo "‚ö†Ô∏è Import time is too slow: ${import_time}ms (threshold: 100ms)"
          exit 1
        else
          echo "‚úÖ Import time is acceptable: ${import_time}ms"
        fi
        
    - name: Measure memory usage
      run: |
        echo "Measuring memory usage..."
        
        # Measure memory usage
        memory_usage=$(node -e "
          const chillUI = require('./lib/commonjs/index.js');
          const used = process.memoryUsage();
          console.log(used.heapUsed / 1024 / 1024);
        ")
        
        echo "Memory usage: ${memory_usage}MB"
        
        # Check if memory usage is acceptable
        if (( $(echo "$memory_usage > 100" | bc -l) )); then
          echo "‚ö†Ô∏è Memory usage is too high: ${memory_usage}MB (threshold: 100MB)"
          exit 1
        else
          echo "‚úÖ Memory usage is acceptable: ${memory_usage}MB"
        fi

  uptime-monitoring:
    name: Uptime Monitoring
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check NPM package availability
      run: |
        echo "Checking NPM package availability..."
        
        # Check if package is available on NPM
        if curl -s "https://registry.npmjs.org/chill-ui" | jq -e '.name' > /dev/null; then
          echo "‚úÖ Package is available on NPM"
        else
          echo "‚ùå Package is not available on NPM"
          exit 1
        fi
        
    - name: Check GitHub repository status
      run: |
        echo "Checking GitHub repository status..."
        
        # Check if repository is accessible
        if curl -s "https://api.github.com/repos/amirmeb/chill-ui" | jq -e '.name' > /dev/null; then
          echo "‚úÖ Repository is accessible"
        else
          echo "‚ùå Repository is not accessible"
          exit 1
        fi
        
    - name: Check documentation availability
      run: |
        echo "Checking documentation availability..."
        
        # Check if README is accessible
        if curl -s "https://raw.githubusercontent.com/amirmeb/chill-ui/main/README.md" | grep -q "Chill UI"; then
          echo "‚úÖ Documentation is accessible"
        else
          echo "‚ùå Documentation is not accessible"
          exit 1
        fi

  alerting:
    name: Alerting
    runs-on: ubuntu-latest
    needs: [health-check, dependency-monitoring, performance-monitoring, uptime-monitoring]
    if: always()
    
    steps:
    - name: Check monitoring results
      run: |
        echo "Checking monitoring results..."
        
        # Check if any monitoring job failed
        failed_jobs=()
        
        if [ "${{ needs.health-check.result }}" != "success" ]; then
          failed_jobs+=("health-check")
        fi
        
        if [ "${{ needs.dependency-monitoring.result }}" != "success" ]; then
          failed_jobs+=("dependency-monitoring")
        fi
        
        if [ "${{ needs.performance-monitoring.result }}" != "success" ]; then
          failed_jobs+=("performance-monitoring")
        fi
        
        if [ "${{ needs.uptime-monitoring.result }}" != "success" ]; then
          failed_jobs+=("uptime-monitoring")
        fi
        
        if [ ${#failed_jobs[@]} -gt 0 ]; then
          echo "‚ùå Monitoring failures detected:"
          for job in "${failed_jobs[@]}"; do
            echo "  - $job"
          done
          exit 1
        else
          echo "‚úÖ All monitoring checks passed"
        fi
        
    - name: Send alerts
      uses: actions/github-script@v7
      if: failure()
      with:
        script: |
          const message = `üö® **Monitoring Alert**
          
          **Time:** ${new Date().toISOString()}
          **Failed Jobs:** ${{ needs.health-check.result !== 'success' ? 'health-check ' : ''}}${{ needs.dependency-monitoring.result !== 'success' ? 'dependency-monitoring ' : ''}}${{ needs.performance-monitoring.result !== 'success' ? 'performance-monitoring ' : ''}}${{ needs.uptime-monitoring.result !== 'success' ? 'uptime-monitoring ' : ''}}
          
          ### Details
          - **Health Check:** ${{ needs.health-check.result }}
          - **Dependency Monitoring:** ${{ needs.dependency-monitoring.result }}
          - **Performance Monitoring:** ${{ needs.performance-monitoring.result }}
          - **Uptime Monitoring:** ${{ needs.uptime-monitoring.result }}
          
          üîó [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *This is an automated monitoring alert.*`;
          
          // You can add Slack/Discord webhook notifications here
          console.log(`Monitoring alert: ${message}`);
          
          // Create an issue for critical monitoring failures
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Monitoring Alert - ${new Date().toLocaleDateString()}`,
            body: message,
            labels: ['monitoring', 'priority: high']
          });
