name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create release branch
        run: |
          git checkout -b release/v${{ github.event.inputs.version }}

      - name: Update package versions
        run: |
          # Update root package.json
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

          # Update core package.json
          cd chill-ui-core
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Generate changelog
        run: |
          # Create a simple changelog entry
          echo "## [${{ github.event.inputs.version }}] - $(date +%Y-%m-%d)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Added" >> CHANGELOG.md
          echo "- New features and improvements" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          echo "- Bug fixes and optimizations" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Fixed" >> CHANGELOG.md
          echo "- Various bug fixes" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

      - name: Commit changes
        run: |
          git add .
          git commit -m "chore: prepare release v${{ github.event.inputs.version }}"

      - name: Push release branch
        run: |
          git push origin release/v${{ github.event.inputs.version }}

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${{ github.event.inputs.version }}`,
              head: `release/v${{ github.event.inputs.version }}`,
              base: 'main',
              body: `## Release v${{ github.event.inputs.version }}
              
              This PR prepares the release of version ${{ github.event.inputs.version }}.
              
              ### Changes:
              - Updated package versions
              - Generated changelog
              - Prepared for release
              
              ### Checklist:
              - [ ] All tests pass
              - [ ] Build is successful
              - [ ] Documentation is updated
              - [ ] Changelog is updated
              - [ ] Version numbers are correct
              
              Once this PR is merged, the release will be automatically triggered.`
            });

            console.log(`Created PR: ${pullRequest.html_url}`);

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Extract version
        id: version
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build all variants
        run: |
          bun run clean
          bun run build
          bun run build:hybrid
          bun run build:tailwind
          bun run build:stylesheet

      - name: Run tests
        run: |
          cd chill-ui-core
          bun run test

      - name: Publish to NPM
        run: |
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./chill-ui-${{ steps.version.outputs.version }}.tgz
          asset_name: chill-ui-${{ steps.version.outputs.version }}.tgz
          asset_content_type: application/gzip

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()

    steps:
      - name: Notify release success
        uses: actions/github-script@v7
        if: needs.create-release.result == 'success'
        with:
          script: |
            const message = `üéâ **Release v${{ steps.version.outputs.version }} Published Successfully**

            **Version:** ${{ steps.version.outputs.version }}
            **Date:** ${new Date().toLocaleDateString()}

            ### Release Details
            - ‚úÖ Tests passed
            - ‚úÖ Build successful
            - ‚úÖ Published to NPM
            - ‚úÖ GitHub release created
            - ‚úÖ Assets uploaded

            ### Installation
            \`\`\`bash
            npm install chill-ui@${{ steps.version.outputs.version }}
            \`\`\`

            ### Links
            - [GitHub Release](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }})
            - [NPM Package](https://www.npmjs.com/package/chill-ui)
            - [Documentation](https://github.com/amirmeb/chill-ui#readme)

            ---
            *This release was automatically generated.*`;

            // You can add Slack/Discord webhook notifications here
            console.log(`Release notification: ${message}`);

      - name: Notify release failure
        uses: actions/github-script@v7
        if: needs.create-release.result == 'failure'
        with:
          script: |
            const message = `üö® **Release v${{ steps.version.outputs.version }} Failed**

            **Version:** ${{ steps.version.outputs.version }}
            **Date:** ${new Date().toLocaleDateString()}

            ### Failure Details
            - ‚ùå Release process failed
            - ‚ùå Check workflow logs for details

            ### Next Steps
            - Review the workflow logs
            - Fix any issues
            - Retry the release

            üîó [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *This is an automated release failure notification.*`;

            // You can add Slack/Discord webhook notifications here
            console.log(`Release failure notification: ${message}`);

            // Create an issue for release failures
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Release Failure - v${{ steps.version.outputs.version }}`,
              body: message,
              labels: ['release', 'priority: high']
            });

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release]
    if: needs.create-release.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Update documentation
        run: |
          echo "Updating documentation..."
          # Add your documentation update logic here
          # For example, update GitHub Pages, GitBook, etc.

      - name: Update CDN
        run: |
          echo "Updating CDN..."
          # Add your CDN update logic here
          # For example, upload to AWS S3, Cloudflare, etc.

      - name: Notify stakeholders
        run: |
          echo "Notifying stakeholders..."
          # Add your notification logic here
          # For example, send emails, Slack messages, etc.

      - name: Update project status
        run: |
          echo "Updating project status..."
          # Add your project status update logic here
          # For example, update project boards, issue trackers, etc.
