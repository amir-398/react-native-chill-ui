name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Run TypeScript check
      run: |
        cd chill-ui-core
        bun run ts:check
        
    - name: Run ESLint
      run: |
        cd chill-ui-core
        bun run lint
        
    - name: Run Prettier check
      run: |
        cd chill-ui-core
        bun run format --check
        
    - name: Run tests
      run: |
        cd chill-ui-core
        bun run test:coverage
        
    - name: Build test
      run: |
        bun run clean
        bun run build
        
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read coverage report if it exists
          let coverageComment = '';
          try {
            const coveragePath = path.join('chill-ui-core', 'coverage', 'lcov-report', 'index.html');
            if (fs.existsSync(coveragePath)) {
              coverageComment = '\n\nüìä **Coverage Report**: Available in the build artifacts';
            }
          } catch (error) {
            console.log('No coverage report found');
          }
          
          const comment = `## üîç PR Quality Check Results
          
          ### ‚úÖ Checks Completed:
          - TypeScript compilation
          - ESLint validation
          - Prettier formatting
          - Unit tests
          - Build verification
          
          ${coverageComment}
          
          ### üìã Next Steps:
          - Review any failed checks above
          - Ensure all tests pass
          - Verify build output is correct
          
          ---
          *This comment will be updated on each push to the PR.*`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('PR Quality Check Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  pr-preview:
    name: Build Preview
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Build all variants
      run: |
        bun run clean
        bun run build
        bun run build:hybrid
        bun run build:tailwind
        bun run build:stylesheet
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pr-build-${{ github.event.pull_request.number }}
        path: |
          lib/
          lib-tw/
          lib-ss/
        retention-days: 7
        
    - name: Comment with build info
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üèóÔ∏è Build Preview
          
          ### Build Status: ‚úÖ Success
          
          All variants have been built successfully:
          - **Core Library**: \`lib/\`
          - **Hybrid Variant**: \`lib-tw/\`
          - **Stylesheet Variant**: \`lib-ss/\`
          
          ### üì¶ Build Artifacts
          Build artifacts are available for download in the Actions tab.
          
          ### üß™ Test the Build
          You can test the built library by downloading the artifacts and importing them in your project.
          
          ---
          *Build artifacts will be available for 7 days.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Run security audit
      run: |
        cd chill-ui-core
        bun audit
        
    - name: Check for known vulnerabilities
      run: |
        cd chill-ui-core
        npm audit --audit-level moderate || true
