name: Testing

on:
  push:
    branches: [main, develop, tests-branch]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run comprehensive tests daily at 5:00 AM UTC
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Run unit tests
        run: |
          cd chill-ui-core
          bun run test

      - name: Run tests with coverage
        run: |
          cd chill-ui-core
          bun run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 20
        with:
          file: ./chill-ui-core/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build library
        run: |
          bun run build

      - name: Run integration tests
        run: |
          cd chill-ui-core
          echo "Running integration tests..."

          # Test that the built library can be imported
          node -e "
            try {
              const core = require('../lib/commonjs/index.js');
              const tailwind = require('../lib-tw/commonjs/index.js');
              const stylesheet = require('../lib-ss/commonjs/index.js');
              console.log('✅ All variants can be imported successfully');
              console.log('Core exports:', Object.keys(core));
              console.log('Tailwind exports:', Object.keys(tailwind));
              console.log('Stylesheet exports:', Object.keys(stylesheet));
            } catch (error) {
              console.error('❌ Integration test failed:', error.message);
              process.exit(1);
            }
          "

      - name: Test component rendering
        run: |
          cd chill-ui-core
          echo "Testing component rendering..."

          # Create a simple test to verify components can be rendered
          cat > integration-test.js << 'EOF'
          const React = require('react');
          const { render } = require('react-test-renderer');

          // Test basic component rendering
          try {
            const TestComponent = () => React.createElement('div', { testID: 'test' }, 'Hello World');
            const tree = render(React.createElement(TestComponent));
            console.log('✅ Component rendering test passed');
          } catch (error) {
            console.error('❌ Component rendering test failed:', error.message);
            process.exit(1);
          }
          EOF

          node integration-test.js

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build library
        run: |
          bun run build

      - name: Run E2E tests
        run: |
          cd chill-ui-core
          echo "Running E2E tests..."

          # Test that the library works in a real React Native environment
          cat > e2e-test.js << 'EOF'
          const React = require('react');
          const { render } = require('react-test-renderer');

          // Test that components can be imported and used
          try {
            // Simulate importing and using a component
            const TestComponent = () => React.createElement('View', { testID: 'e2e-test' }, 'E2E Test');
            const tree = render(React.createElement(TestComponent));
            
            // Verify the component was rendered
            if (tree.toJSON().props.testID === 'e2e-test') {
              console.log('✅ E2E test passed');
            } else {
              throw new Error('Component not rendered correctly');
            }
          } catch (error) {
            console.error('❌ E2E test failed:', error.message);
            process.exit(1);
          }
          EOF

          node e2e-test.js

  cross-platform-tests:
    name: Cross-Platform Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build library
        run: |
          bun run build

      - name: Test iOS compatibility
        run: |
          cd chill-ui-core
          echo "Testing iOS compatibility..."

          # Test that the library works on iOS
          cat > ios-test.js << 'EOF'
          // Simulate iOS environment
          global.Platform = { OS: 'ios' };

          try {
            const core = require('../lib/commonjs/index.js');
            console.log('✅ iOS compatibility test passed');
          } catch (error) {
            console.error('❌ iOS compatibility test failed:', error.message);
            process.exit(1);
          }
          EOF

          node ios-test.js

      - name: Test Android compatibility
        run: |
          cd chill-ui-core
          echo "Testing Android compatibility..."

          # Test that the library works on Android
          cat > android-test.js << 'EOF'
          // Simulate Android environment
          global.Platform = { OS: 'android' };

          try {
            const core = require('../lib/commonjs/index.js');
            console.log('✅ Android compatibility test passed');
          } catch (error) {
            console.error('❌ Android compatibility test failed:', error.message);
            process.exit(1);
          }
          EOF

          node android-test.js

      - name: Test Web compatibility
        run: |
          cd chill-ui-core
          echo "Testing Web compatibility..."

          # Test that the library works on Web
          cat > web-test.js << 'EOF'
          // Simulate Web environment
          global.Platform = { OS: 'web' };
          global.window = {};
          global.document = {};

          try {
            const core = require('../lib/commonjs/index.js');
            console.log('✅ Web compatibility test passed');
          } catch (error) {
            console.error('❌ Web compatibility test failed:', error.message);
            process.exit(1);
          }
          EOF

          node web-test.js

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build library
        run: |
          bun run build

      - name: Run performance tests
        run: |
          cd chill-ui-core
          echo "Running performance tests..."

          # Test import performance
          cat > performance-test.js << 'EOF'
          const { performance } = require('perf_hooks');

          // Test import performance
          const startImport = performance.now();
          const chillUI = require('../lib/commonjs/index.js');
          const endImport = performance.now();

          const importTime = endImport - startImport;
          console.log(`Import time: ${importTime.toFixed(2)}ms`);

          // Check if import time is acceptable
          if (importTime > 100) {
            console.error(`❌ Import time too slow: ${importTime.toFixed(2)}ms (threshold: 100ms)`);
            process.exit(1);
          } else {
            console.log(`✅ Import time acceptable: ${importTime.toFixed(2)}ms`);
          }

          // Test component creation performance
          const startCreate = performance.now();
          for (let i = 0; i < 1000; i++) {
            // Simulate component creation
            const component = { type: 'Box', props: { test: i } };
          }
          const endCreate = performance.now();

          const createTime = endCreate - startCreate;
          console.log(`Component creation time (1000x): ${createTime.toFixed(2)}ms`);

          // Check if creation time is acceptable
          if (createTime > 10) {
            console.error(`❌ Component creation too slow: ${createTime.toFixed(2)}ms (threshold: 10ms)`);
            process.exit(1);
          } else {
            console.log(`✅ Component creation acceptable: ${createTime.toFixed(2)}ms`);
          }
          EOF

          node performance-test.js

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, cross-platform-tests, performance-tests]
    if: always()

    steps:
      - name: Generate test report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## 🧪 Test Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Test Results
            - **Unit Tests:** ${{ needs.unit-tests.result === 'success' ? '✅ Passed' : '❌ Failed' }}
            - **Integration Tests:** ${{ needs.integration-tests.result === 'success' ? '✅ Passed' : '❌ Failed' }}
            - **E2E Tests:** ${{ needs.e2e-tests.result === 'success' ? '✅ Passed' : '❌ Failed' }}
            - **Cross-Platform Tests:** ${{ needs.cross-platform-tests.result === 'success' ? '✅ Passed' : '❌ Failed' }}
            - **Performance Tests:** ${{ needs.performance-tests.result === 'success' ? '✅ Passed' : '❌ Failed' }}

            ### Test Coverage
            - **Coverage:** Available in unit test artifacts
            - **Platforms:** iOS, Android, Web
            - **Performance:** Import and component creation benchmarks

            ### Summary
            ${{ needs.unit-tests.result === 'success' && needs.integration-tests.result === 'success' && needs.e2e-tests.result === 'success' && needs.cross-platform-tests.result === 'success' && needs.performance-tests.result === 'success' ? '✅ All tests passed' : '⚠️ Some tests failed' }}

            ### Recommendations
            - Review failed tests
            - Maintain test coverage above 80%
            - Monitor performance benchmarks
            - Test on all supported platforms

            ---
            *This test report was automatically generated.*`;

            // Create a discussion with the test report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Test Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'general'
            });

            console.log('Test report generated successfully');

      - name: Alert on test failure
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            const alert = `🚨 **Test Failure Alert**

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Failed Tests
            ${{ needs.unit-tests.result !== 'success' ? '- Unit tests failed' : '' }}
            ${{ needs.integration-tests.result !== 'success' ? '- Integration tests failed' : '' }}
            ${{ needs.e2e-tests.result !== 'success' ? '- E2E tests failed' : '' }}
            ${{ needs.cross-platform-tests.result !== 'success' ? '- Cross-platform tests failed' : '' }}
            ${{ needs.performance-tests.result !== 'success' ? '- Performance tests failed' : '' }}

            ### Details
            - **Repository:** ${{ github.repository }}
            - **Commit:** ${{ github.sha }}
            - **Run ID:** ${{ github.run_id }}

            🔗 [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *This is an automated test failure alert.*`;

            // You can add Slack/Discord webhook notifications here
            console.log(`Test failure alert: ${alert}`);

            // Create an issue for test failures
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Test Failure - ${new Date().toLocaleDateString()}`,
              body: alert,
              labels: ['testing', 'priority: high']
            });
