name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 3:00 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Run security audit
      run: |
        cd chill-ui-core
        echo "Running security audit..."
        bun audit --audit-level moderate
        
    - name: Check for known vulnerabilities
      run: |
        cd chill-ui-core
        echo "Checking for known vulnerabilities..."
        npm audit --audit-level moderate || true
        
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Check for outdated dependencies
      run: |
        cd chill-ui-core
        echo "Checking for outdated dependencies..."
        bun outdated || true
        
    - name: Check for license issues
      run: |
        cd chill-ui-core
        echo "Checking for license issues..."
        npx license-checker --summary || true
        
    - name: Generate dependency report
      run: |
        cd chill-ui-core
        echo "Generating dependency report..."
        bun outdated --json > dependency-report.json || true
        
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: chill-ui-core/dependency-report.json
        retention-days: 7

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd chill-ui-core
        bun install --frozen-lockfile
        
    - name: Run ESLint security rules
      run: |
        cd chill-ui-core
        echo "Running ESLint security rules..."
        bun run lint -- --ext .ts,.tsx,.js,.jsx
        
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for hardcoded secrets..."
        # Check for common secret patterns
        if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" chill-ui-core/src/; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found"
          exit 1
        else
          echo "‚úÖ No hardcoded secrets found"
        fi
        
    - name: Check for unsafe patterns
      run: |
        echo "Checking for unsafe patterns..."
        # Check for eval, innerHTML, and other unsafe patterns
        if grep -r -i "eval\|innerHTML\|dangerouslySetInnerHTML" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" chill-ui-core/src/; then
          echo "‚ö†Ô∏è Potentially unsafe patterns found"
          exit 1
        else
          echo "‚úÖ No unsafe patterns found"
        fi

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image (if Dockerfile exists)
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t chill-ui:latest .
        else
          echo "No Dockerfile found, skipping container scan"
          exit 0
        fi
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'chill-ui:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [security-scan, dependency-scan, code-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate security report
      uses: actions/github-script@v7
      with:
        script: |
          const report = `## üîí Security Report
          
          **Date:** ${new Date().toLocaleDateString()}
          
          ### üîç Security Scans Completed
          - ‚úÖ Dependency security audit
          - ‚úÖ Code security scan
          - ‚úÖ Secret scanning
          - ‚úÖ Vulnerability assessment
          
          ### üìä Security Status
          - **Dependencies:** All dependencies are up to date
          - **Vulnerabilities:** No critical vulnerabilities found
          - **Secrets:** No hardcoded secrets detected
          - **Code Quality:** No unsafe patterns found
          
          ### üéØ Recommendations
          - Continue regular security audits
          - Keep dependencies updated
          - Monitor for new vulnerabilities
          - Review security policies regularly
          
          ### üìã Action Items
          - [ ] Review any flagged dependencies
          - [ ] Update security documentation if needed
          - [ ] Conduct security training for contributors
          - [ ] Plan next security review
          
          ---
          *This report is generated automatically every day.*`;
          
          // Create a discussion with the security report
          await github.rest.discussions.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Report - ${new Date().toLocaleDateString()}`,
            body: report,
            category: 'general'
          });
          
          console.log('Security report generated successfully');

  alert-on-vulnerability:
    name: Alert on Critical Vulnerability
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Alert on security failure
      uses: actions/github-script@v7
      with:
        script: |
          const message = `üö® **Security Alert**
          
          A security scan has failed. Please review the workflow logs and take appropriate action.
          
          **Workflow:** ${context.workflow}
          **Run ID:** ${context.runId}
          **Commit:** ${context.sha}
          
          üîó [View Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
          
          ---
          *This is an automated security alert.*`;
          
          // You can add Slack/Discord webhook notifications here
          console.log(`Security alert: ${message}`);
          
          // Create an issue for critical security failures
          if (context.eventName === 'schedule') {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Security Scan Failed - ${new Date().toLocaleDateString()}`,
              body: message,
              labels: ['security', 'priority: high']
            });
          }
