name: Backup

on:
  schedule:
    # Run backup daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  backup-repository:
    name: Backup Repository
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build all variants
        run: |
          bun run clean
          bun run build
          bun run build:hybrid
          bun run build:tailwind
          bun run build:stylesheet

      - name: Create backup archive
        run: |
          echo "Creating backup archive..."

          # Create timestamp
          timestamp=$(date +%Y%m%d_%H%M%S)

          # Create backup directory
          mkdir -p backup

          # Copy important files
          cp -r lib/ backup/
          cp -r lib-tw/ backup/
          cp -r lib-ss/ backup/
          cp -r chill-ui-core/src/ backup/
          cp -r chill-ui-core/stories/ backup/
          cp -r .github/ backup/
          cp package.json backup/
          cp chill-ui-core/package.json backup/
          cp README.md backup/
          cp chill-ui-core/README.md backup/

          # Create archive
          tar -czf "backup_${timestamp}.tar.gz" backup/

          # Get archive size
          archive_size=$(du -h "backup_${timestamp}.tar.gz" | cut -f1)
          echo "Backup archive size: $archive_size"

      - name: Upload backup to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backup-${{ github.run_number }}
          path: backup_*.tar.gz
          retention-days: 30

      - name: Generate backup report
        run: |
          echo "## Backup Report" > backup-report.md
          echo "" >> backup-report.md
          echo "**Date:** $(date)" >> backup-report.md
          echo "**Repository:** ${{ github.repository }}" >> backup-report.md
          echo "**Commit:** ${{ github.sha }}" >> backup-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> backup-report.md
          echo "" >> backup-report.md
          echo "### Backup Contents" >> backup-report.md
          echo "- Source code" >> backup-report.md
          echo "- Built libraries" >> backup-report.md
          echo "- Stories and examples" >> backup-report.md
          echo "- GitHub workflows" >> backup-report.md
          echo "- Package configurations" >> backup-report.md
          echo "- Documentation" >> backup-report.md
          echo "" >> backup-report.md
          echo "### Archive Details" >> backup-report.md
          echo "- **Size:** $archive_size" >> backup-report.md
          echo "- **Format:** tar.gz" >> backup-report.md
          echo "- **Retention:** 30 days" >> backup-report.md
          echo "" >> backup-report.md
          echo "### Backup Status" >> backup-report.md
          echo "‚úÖ Backup completed successfully" >> backup-report.md

          cat backup-report.md

      - name: Upload backup report
        uses: actions/upload-artifact@v4
        with:
          name: backup-report-${{ github.run_number }}
          path: backup-report.md
          retention-days: 30

  backup-dependencies:
    name: Backup Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Generate dependency snapshot
        run: |
          echo "Generating dependency snapshot..."

          # Create timestamp
          timestamp=$(date +%Y%m%d_%H%M%S)

          # Generate dependency reports
          cd chill-ui-core

          # Get installed packages
          bun pm ls --json > "dependencies_${timestamp}.json"

          # Get outdated packages
          bun outdated --json > "outdated_${timestamp}.json" 2>/dev/null || echo "[]" > "outdated_${timestamp}.json"

          # Get security audit
          bun audit --json > "audit_${timestamp}.json" 2>/dev/null || echo "{}" > "audit_${timestamp}.json"

          # Get lockfile
          cp bun.lock "lockfile_${timestamp}.lock"

          echo "Dependency snapshot created with timestamp: $timestamp"

      - name: Upload dependency snapshot
        uses: actions/upload-artifact@v4
        with:
          name: dependencies-${{ github.run_number }}
          path: chill-ui-core/dependencies_*.json
          retention-days: 30

      - name: Upload outdated packages
        uses: actions/upload-artifact@v4
        with:
          name: outdated-${{ github.run_number }}
          path: chill-ui-core/outdated_*.json
          retention-days: 30

      - name: Upload security audit
        uses: actions/upload-artifact@v4
        with:
          name: audit-${{ github.run_number }}
          path: chill-ui-core/audit_*.json
          retention-days: 30

      - name: Upload lockfile
        uses: actions/upload-artifact@v4
        with:
          name: lockfile-${{ github.run_number }}
          path: chill-ui-core/lockfile_*.lock
          retention-days: 30

  backup-documentation:
    name: Backup Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Generate documentation backup
        run: |
          echo "Generating documentation backup..."

          # Create timestamp
          timestamp=$(date +%Y%m%d_%H%M%S)

          # Create documentation backup directory
          mkdir -p "docs_backup_${timestamp}"

          # Copy documentation files
          cp -r README.md "docs_backup_${timestamp}/"
          cp -r chill-ui-core/README.md "docs_backup_${timestamp}/"
          cp -r BUILD.md "docs_backup_${timestamp}/"
          cp -r chill-ui-core/MIGRATION-GUIDE.md "docs_backup_${timestamp}/"
          cp -r .github/ "docs_backup_${timestamp}/"

          # Copy component documentation
          find chill-ui-core/src/components -name "README.md" -exec cp --parents {} "docs_backup_${timestamp}/" \;

          # Copy stories
          cp -r chill-ui-core/stories/ "docs_backup_${timestamp}/"

          # Create archive
          tar -czf "docs_backup_${timestamp}.tar.gz" "docs_backup_${timestamp}/"

          # Get archive size
          archive_size=$(du -h "docs_backup_${timestamp}.tar.gz" | cut -f1)
          echo "Documentation backup size: $archive_size"

      - name: Upload documentation backup
        uses: actions/upload-artifact@v4
        with:
          name: docs-backup-${{ github.run_number }}
          path: docs_backup_*.tar.gz
          retention-days: 30

      - name: Generate documentation report
        run: |
          echo "## Documentation Backup Report" > docs-backup-report.md
          echo "" >> docs-backup-report.md
          echo "**Date:** $(date)" >> docs-backup-report.md
          echo "**Repository:** ${{ github.repository }}" >> docs-backup-report.md
          echo "**Commit:** ${{ github.sha }}" >> docs-backup-report.md
          echo "" >> docs-backup-report.md
          echo "### Documentation Contents" >> docs-backup-report.md
          echo "- README files" >> docs-backup-report.md
          echo "- Build documentation" >> docs-backup-report.md
          echo "- Migration guides" >> docs-backup-report.md
          echo "- GitHub workflows" >> docs-backup-report.md
          echo "- Component documentation" >> docs-backup-report.md
          echo "- Storybook stories" >> docs-backup-report.md
          echo "" >> docs-backup-report.md
          echo "### Archive Details" >> docs-backup-report.md
          echo "- **Size:** $archive_size" >> docs-backup-report.md
          echo "- **Format:** tar.gz" >> docs-backup-report.md
          echo "- **Retention:** 30 days" >> docs-backup-report.md
          echo "" >> docs-backup-report.md
          echo "### Backup Status" >> docs-backup-report.md
          echo "‚úÖ Documentation backup completed successfully" >> docs-backup-report.md

          cat docs-backup-report.md

      - name: Upload documentation report
        uses: actions/upload-artifact@v4
        with:
          name: docs-backup-report-${{ github.run_number }}
          path: docs-backup-report.md
          retention-days: 30

  backup-summary:
    name: Backup Summary
    runs-on: ubuntu-latest
    needs: [backup-repository, backup-dependencies, backup-documentation]
    if: always()

    steps:
      - name: Generate backup summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## üì¶ Backup Summary

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Backup Status
            - **Repository Backup:** ${{ needs.backup-repository.result === 'success' ? '‚úÖ Success' : '‚ùå Failed' }}
            - **Dependencies Backup:** ${{ needs.backup-dependencies.result === 'success' ? '‚úÖ Success' : '‚ùå Failed' }}
            - **Documentation Backup:** ${{ needs.backup-documentation.result === 'success' ? '‚úÖ Success' : '‚ùå Failed' }}

            ### Backup Details
            - **Repository:** ${{ github.repository }}
            - **Commit:** ${{ github.sha }}
            - **Branch:** ${{ github.ref_name }}
            - **Run Number:** ${{ github.run_number }}

            ### Artifacts Created
            - Repository backup archive
            - Dependencies snapshot
            - Documentation backup
            - Backup reports

            ### Retention
            All backup artifacts are retained for 30 days.

            ---
            *This backup was automatically generated.*`;

            // Create a discussion with the backup summary
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Backup Summary - ${new Date().toLocaleDateString()}`,
              body: summary,
              category: 'general'
            });

            console.log('Backup summary generated successfully');

      - name: Alert on backup failure
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            const alert = `üö® **Backup Failure Alert**

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Failed Backups
            ${{ needs.backup-repository.result !== 'success' ? '- Repository backup failed' : '' }}
            ${{ needs.backup-dependencies.result !== 'success' ? '- Dependencies backup failed' : '' }}
            ${{ needs.backup-documentation.result !== 'success' ? '- Documentation backup failed' : '' }}

            ### Details
            - **Repository:** ${{ github.repository }}
            - **Commit:** ${{ github.sha }}
            - **Run ID:** ${{ github.run_id }}

            üîó [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *This is an automated backup failure alert.*`;

            // You can add Slack/Discord webhook notifications here
            console.log(`Backup failure alert: ${alert}`);

            // Create an issue for backup failures
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Backup Failure - ${new Date().toLocaleDateString()}`,
              body: alert,
              labels: ['backup', 'priority: high']
            });
