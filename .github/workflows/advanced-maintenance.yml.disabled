name: Advanced Maintenance

on:
  schedule:
    # Run maintenance tasks weekly on Sundays at 3:00 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - code_cleanup
          - documentation
          - performance
          - security
      maintenance_level:
        description: 'Level of maintenance to perform'
        required: false
        default: 'standard'
        type: choice
        options:
          - light
          - standard
          - deep
          - comprehensive

jobs:
  dependency-maintenance:
    name: Dependency Maintenance
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'all' || github.event.inputs.maintenance_type == 'dependencies'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Check for outdated dependencies
        id: outdated-deps
        run: |
          echo "Checking for outdated dependencies..."

          cd chill-ui-core

          # Check for outdated dependencies
          outdated=$(bun outdated --json 2>/dev/null || echo "[]")
          outdated_count=$(echo "$outdated" | jq length)

          echo "outdated-count=$outdated_count" >> $GITHUB_OUTPUT

          if [ "$outdated_count" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $outdated_count outdated dependencies:"
            echo "$outdated" | jq -r '.[] | "\(.name): \(.current) -> \(.latest)"'
          else
            echo "‚úÖ All dependencies are up to date"
          fi

      - name: Check for security vulnerabilities
        run: |
          echo "Checking for security vulnerabilities..."

          cd chill-ui-core

          # Run security audit
          if bun audit --audit-level moderate; then
            echo "‚úÖ Security audit passed"
          else
            echo "‚ö†Ô∏è Security audit failed"
          fi

      - name: Check for duplicate dependencies
        run: |
          echo "Checking for duplicate dependencies..."

          cd chill-ui-core

          # Check for duplicate dependencies
          duplicates=$(bun pm ls --json 2>/dev/null | jq -r '.[] | select(.duplicate == true) | .name' | wc -l)

          echo "duplicate-count=$duplicates" >> $GITHUB_OUTPUT

          if [ "$duplicates" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $duplicates duplicate dependencies"
          else
            echo "‚úÖ No duplicate dependencies found"
          fi

      - name: Check for unused dependencies
        run: |
          echo "Checking for unused dependencies..."

          cd chill-ui-core

          # Check for unused dependencies
          unused=$(bun pm ls --json 2>/dev/null | jq -r '.[] | select(.unused == true) | .name' | wc -l)

          echo "unused-count=$unused" >> $GITHUB_OUTPUT

          if [ "$unused" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $unused unused dependencies"
          else
            echo "‚úÖ No unused dependencies found"
          fi

      - name: Update dependencies
        if: github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive'
        run: |
          echo "Updating dependencies..."

          cd chill-ui-core

          # Update dependencies based on maintenance level
          case "${{ github.event.inputs.maintenance_level }}" in
            "deep")
              echo "Performing deep dependency update..."
              bun update
              ;;
            "comprehensive")
              echo "Performing comprehensive dependency update..."
              bun update --latest
              ;;
          esac

      - name: Generate dependency maintenance report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üì¶ Dependency Maintenance Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Dependency Status
            - **Outdated Dependencies:** ${{ steps.outdated-deps.outputs.outdated-count }}
            - **Duplicate Dependencies:** ${{ steps.outdated-deps.outputs.duplicate-count }}
            - **Unused Dependencies:** ${{ steps.outdated-deps.outputs.unused-count }}

            ### Maintenance Actions
            - **Dependency Updates:** ${{ github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive' ? '‚úÖ Performed' : '‚è≠Ô∏è Skipped' }}

            ### Recommendations
            - Update outdated dependencies
            - Remove duplicate dependencies
            - Clean up unused dependencies
            - Monitor security vulnerabilities
            - Regular dependency audits
            - Automated dependency updates

            ---
            *This dependency maintenance report was automatically generated.*`;

            // Create a discussion with the dependency maintenance report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Dependency Maintenance Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'maintenance'
            });

            console.log('Dependency maintenance report generated successfully');

  code-cleanup:
    name: Code Cleanup
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'all' || github.event.inputs.maintenance_type == 'code_cleanup'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Run code cleanup
        id: code-cleanup
        run: |
          echo "Running code cleanup..."

          cd chill-ui-core

          # Run ESLint with fix
          if bun run lint --fix; then
            echo "eslint-cleanup=success" >> $GITHUB_OUTPUT
            echo "‚úÖ ESLint cleanup completed"
          else
            echo "eslint-cleanup=failed" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è ESLint cleanup failed"
          fi

          # Run Prettier with fix
          if bun run format; then
            echo "prettier-cleanup=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Prettier cleanup completed"
          else
            echo "prettier-cleanup=failed" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Prettier cleanup failed"
          fi

      - name: Remove unused imports
        if: github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive'
        run: |
          echo "Removing unused imports..."

          cd chill-ui-core

          # Find and remove unused imports
          find src -name "*.ts" -o -name "*.tsx" | while read file; do
            echo "Processing $file"
            # Simple unused import detection
            grep -n "import.*from" "$file" | while read line; do
              import_line=$(echo "$line" | cut -d: -f2)
              import_name=$(echo "$import_line" | sed 's/import.*{\([^}]*\)}.*/\1/' | tr ',' '\n' | tr -d ' ')
              
              for name in $import_name; do
                if ! grep -q "$name" "$file" | grep -v "import.*$name"; then
                  echo "‚ö†Ô∏è Potentially unused import: $name in $file"
                fi
              done
            done
          done

      - name: Remove dead code
        if: github.event.inputs.maintenance_level == 'comprehensive'
        run: |
          echo "Removing dead code..."

          cd chill-ui-core

          # Find potentially dead code
          find src -name "*.ts" -o -name "*.tsx" | while read file; do
            echo "Analyzing $file for dead code"
            
            # Check for unused functions
            grep -n "function\|const.*=" "$file" | while read line; do
              func_name=$(echo "$line" | sed 's/.*function \([a-zA-Z0-9_]*\).*/\1/' | sed 's/.*const \([a-zA-Z0-9_]*\).*/\1/')
              
              if [ -n "$func_name" ] && [ "$func_name" != "=" ]; then
                if ! grep -q "$func_name" "$file" | grep -v "function.*$func_name\|const.*$func_name"; then
                  echo "‚ö†Ô∏è Potentially unused function: $func_name in $file"
                fi
              fi
            done
          done

      - name: Optimize imports
        if: github.event.inputs.maintenance_level == 'comprehensive'
        run: |
          echo "Optimizing imports..."

          cd chill-ui-core

          # Optimize import statements
          find src -name "*.ts" -o -name "*.tsx" | while read file; do
            echo "Optimizing imports in $file"
            
            # Sort imports alphabetically
            if grep -q "import.*from" "$file"; then
              echo "Sorting imports in $file"
              # This is a simplified example - in practice, you'd use a proper import sorting tool
            fi
          done

      - name: Generate code cleanup report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üßπ Code Cleanup Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Cleanup Actions
            - **ESLint Cleanup:** ${{ steps.code-cleanup.outputs.eslint-cleanup === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Prettier Cleanup:** ${{ steps.code-cleanup.outputs.prettier-cleanup === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Unused Imports Removal:** ${{ github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive' ? '‚úÖ Performed' : '‚è≠Ô∏è Skipped' }}
            - **Dead Code Removal:** ${{ github.event.inputs.maintenance_level == 'comprehensive' ? '‚úÖ Performed' : '‚è≠Ô∏è Skipped' }}
            - **Import Optimization:** ${{ github.event.inputs.maintenance_level == 'comprehensive' ? '‚úÖ Performed' : '‚è≠Ô∏è Skipped' }}

            ### Maintenance Level
            - **Level:** ${{ github.event.inputs.maintenance_level || 'standard' }}

            ### Recommendations
            - Regular code cleanup
            - Remove unused code
            - Optimize imports
            - Maintain code quality
            - Automated cleanup tools
            - Code review practices

            ---
            *This code cleanup report was automatically generated.*`;

            // Create a discussion with the code cleanup report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Code Cleanup Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'maintenance'
            });

            console.log('Code cleanup report generated successfully');

  documentation-maintenance:
    name: Documentation Maintenance
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'all' || github.event.inputs.maintenance_type == 'documentation'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Check documentation completeness
        id: doc-completeness
        run: |
          echo "Checking documentation completeness..."

          # Check if main README exists
          if [ -f "README.md" ]; then
            echo "main-readme-exists=true" >> $GITHUB_OUTPUT
          else
            echo "main-readme-exists=false" >> $GITHUB_OUTPUT
          fi

          # Check if core README exists
          if [ -f "chill-ui-core/README.md" ]; then
            echo "core-readme-exists=true" >> $GITHUB_OUTPUT
          else
            echo "core-readme-exists=false" >> $GITHUB_OUTPUT
          fi

          # Check component documentation
          component_docs=0
          total_components=0

          find chill-ui-core/src/components -type d -mindepth 1 -maxdepth 1 | while read dir; do
            component_name=$(basename "$dir")
            readme_file="$dir/README.md"
            
            total_components=$((total_components + 1))
            
            if [ -f "$readme_file" ]; then
              component_docs=$((component_docs + 1))
            fi
          done

          echo "component-docs=$component_docs" >> $GITHUB_OUTPUT
          echo "total-components=$total_components" >> $GITHUB_OUTPUT

      - name: Update documentation
        if: github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive'
        run: |
          echo "Updating documentation..."

          # Update version references in documentation
          if [ -f "README.md" ]; then
            echo "Updating version references in README.md"
            # This would update version references to current version
          fi

          # Update component documentation
          find chill-ui-core/src/components -type d -mindepth 1 -maxdepth 1 | while read dir; do
            component_name=$(basename "$dir")
            readme_file="$dir/README.md"
            
            if [ -f "$readme_file" ]; then
              echo "Updating documentation for $component_name"
              # This would update component documentation
            fi
          done

      - name: Check documentation links
        run: |
          echo "Checking documentation links..."

          # Check for broken links in README files
          broken_links=0

          find . -name "README.md" | while read file; do
            echo "Checking links in $file"
            # Simple check for common link patterns
            grep -n "http" "$file" | while read line; do
              url=$(echo "$line" | sed 's/.*http[^[:space:]]*//')
              if [ -n "$url" ]; then
                if ! curl -s --head "$url" | head -n 1 | grep -q "200 OK"; then
                  echo "‚ö†Ô∏è Potentially broken link in $file: $url"
                  broken_links=$((broken_links + 1))
                fi
              fi
            done
          done

          echo "broken-links=$broken_links" >> $GITHUB_OUTPUT

      - name: Generate documentation maintenance report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üìö Documentation Maintenance Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Documentation Status
            - **Main README:** ${{ steps.doc-completeness.outputs.main-readme-exists === 'true' ? '‚úÖ Exists' : '‚ùå Missing' }}
            - **Core README:** ${{ steps.doc-completeness.outputs.core-readme-exists === 'true' ? '‚úÖ Exists' : '‚ùå Missing' }}
            - **Component Documentation:** ${{ steps.doc-completeness.outputs.component-docs }}/${{ steps.doc-completeness.outputs.total-components }}
            - **Broken Links:** ${{ steps.doc-completeness.outputs.broken-links }}

            ### Maintenance Actions
            - **Documentation Updates:** ${{ github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive' ? '‚úÖ Performed' : '‚è≠Ô∏è Skipped' }}

            ### Recommendations
            - Complete missing documentation
            - Fix broken links
            - Update outdated information
            - Add usage examples
            - Improve API documentation
            - Maintain consistency

            ---
            *This documentation maintenance report was automatically generated.*`;

            // Create a discussion with the documentation maintenance report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Documentation Maintenance Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'maintenance'
            });

            console.log('Documentation maintenance report generated successfully');

  performance-maintenance:
    name: Performance Maintenance
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'all' || github.event.inputs.maintenance_type == 'performance'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Build library
        run: |
          bun run build

      - name: Measure bundle sizes
        id: bundle-sizes
        run: |
          echo "Measuring bundle sizes..."

          # Measure bundle sizes
          for variant in lib lib-tw lib-ss; do
            if [ -d "$variant" ]; then
              for format in commonjs module typescript; do
                if [ -d "$variant/$format" ]; then
                  size=$(du -sb "$variant/$format" | cut -f1)
                  echo "$variant-$format-size=$size" >> $GITHUB_OUTPUT
                  echo "$variant-$format-size-kb=$(($size / 1024))" >> $GITHUB_OUTPUT
                  echo "Bundle $variant/$format: $(($size / 1024))KB"
                fi
              done
            fi
          done

      - name: Measure import performance
        id: import-performance
        run: |
          echo "Measuring import performance..."

          # Measure import time
          import_time=$(node -e "
            const start = process.hrtime.bigint();
            require('./lib/commonjs/index.js');
            const end = process.hrtime.bigint();
            console.log(Number(end - start) / 1000000);
          ")

          echo "import-time=$import_time" >> $GITHUB_OUTPUT
          echo "Import time: ${import_time}ms"

          # Measure memory usage
          memory_usage=$(node -e "
            const chillUI = require('./lib/commonjs/index.js');
            const used = process.memoryUsage();
            console.log(used.heapUsed / 1024 / 1024);
          ")

          echo "memory-usage=$memory_usage" >> $GITHUB_OUTPUT
          echo "Memory usage: ${memory_usage}MB"

      - name: Optimize performance
        if: github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive'
        run: |
          echo "Optimizing performance..."

          # Performance optimization tasks
          echo "Running performance optimizations..."

          # This would include:
          # - Bundle size optimization
          # - Import optimization
          # - Code splitting
          # - Tree shaking
          # - Dead code elimination

      - name: Generate performance maintenance report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## ‚ö° Performance Maintenance Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Performance Metrics
            - **Import Time:** ${{ steps.import-performance.outputs.import-time }}ms
            - **Memory Usage:** ${{ steps.import-performance.outputs.memory-usage }}MB

            ### Bundle Sizes
            - **Core Library (CommonJS):** ${{ steps.bundle-sizes.outputs.lib-commonjs-size-kb }}KB
            - **Core Library (Module):** ${{ steps.bundle-sizes.outputs.lib-module-size-kb }}KB
            - **Core Library (TypeScript):** ${{ steps.bundle-sizes.outputs.lib-typescript-size-kb }}KB
            - **Tailwind Variant (CommonJS):** ${{ steps.bundle-sizes.outputs.lib-tw-commonjs-size-kb }}KB
            - **Tailwind Variant (Module):** ${{ steps.bundle-sizes.outputs.lib-tw-module-size-kb }}KB
            - **Tailwind Variant (TypeScript):** ${{ steps.bundle-sizes.outputs.lib-tw-typescript-size-kb }}KB
            - **Stylesheet Variant (CommonJS):** ${{ steps.bundle-sizes.outputs.lib-ss-commonjs-size-kb }}KB
            - **Stylesheet Variant (Module):** ${{ steps.bundle-sizes.outputs.lib-ss-module-size-kb }}KB
            - **Stylesheet Variant (TypeScript):** ${{ steps.bundle-sizes.outputs.lib-ss-typescript-size-kb }}KB

            ### Maintenance Actions
            - **Performance Optimization:** ${{ github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive' ? '‚úÖ Performed' : '‚è≠Ô∏è Skipped' }}

            ### Recommendations
            - Monitor bundle sizes
            - Optimize import performance
            - Reduce memory footprint
            - Implement code splitting
            - Use tree shaking
            - Regular performance audits

            ---
            *This performance maintenance report was automatically generated.*`;

            // Create a discussion with the performance maintenance report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Performance Maintenance Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'maintenance'
            });

            console.log('Performance maintenance report generated successfully');

  security-maintenance:
    name: Security Maintenance
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type == 'all' || github.event.inputs.maintenance_type == 'security'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Run security audit
        id: security-audit
        run: |
          echo "Running security audit..."

          cd chill-ui-core

          # Run security audit
          if bun audit --audit-level moderate; then
            echo "security-audit-status=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ Security audit passed"
          else
            echo "security-audit-status=failed" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Security audit failed"
          fi

      - name: Check for security vulnerabilities
        run: |
          echo "Checking for security vulnerabilities..."

          cd chill-ui-core

          # Check for known vulnerabilities
          vulnerabilities=$(bun audit --json 2>/dev/null || echo "[]")
          vulnerability_count=$(echo "$vulnerabilities" | jq length)

          echo "vulnerability-count=$vulnerability_count" >> $GITHUB_OUTPUT

          if [ "$vulnerability_count" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $vulnerability_count security vulnerabilities"
          else
            echo "‚úÖ No security vulnerabilities found"
          fi

      - name: Update security policies
        if: github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive'
        run: |
          echo "Updating security policies..."

          # Update security policies
          if [ -f "SECURITY.md" ]; then
            echo "Updating SECURITY.md"
            # This would update security policies
          fi

          # Update GitHub security settings
          echo "Updating GitHub security settings"
          # This would update security settings

      - name: Generate security maintenance report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üîí Security Maintenance Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Security Status
            - **Security Audit:** ${{ steps.security-audit.outputs.security-audit-status === 'passed' ? '‚úÖ Passed' : '‚ùå Failed' }}
            - **Vulnerabilities:** ${{ steps.security-audit.outputs.vulnerability-count }}

            ### Maintenance Actions
            - **Security Policy Updates:** ${{ github.event.inputs.maintenance_level == 'deep' || github.event.inputs.maintenance_level == 'comprehensive' ? '‚úÖ Performed' : '‚è≠Ô∏è Skipped' }}

            ### Recommendations
            - Update vulnerable dependencies
            - Review security policies
            - Monitor security advisories
            - Implement security best practices
            - Regular security audits
            - Automated security scanning

            ---
            *This security maintenance report was automatically generated.*`;

            // Create a discussion with the security maintenance report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Maintenance Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'maintenance'
            });

            console.log('Security maintenance report generated successfully');

  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs:
      [dependency-maintenance, code-cleanup, documentation-maintenance, performance-maintenance, security-maintenance]
    if: always()

    steps:
      - name: Generate maintenance summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## üîß Advanced Maintenance Summary

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Maintenance Results
            - **Dependency Maintenance:** ${{ needs.dependency-maintenance.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Code Cleanup:** ${{ needs.code-cleanup.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Documentation Maintenance:** ${{ needs.documentation-maintenance.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Performance Maintenance:** ${{ needs.performance-maintenance.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Security Maintenance:** ${{ needs.security-maintenance.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}

            ### Maintenance Level
            - **Level:** ${{ github.event.inputs.maintenance_level || 'standard' }}
            - **Type:** ${{ github.event.inputs.maintenance_type || 'all' }}

            ### Overall Status
            ${{ needs.dependency-maintenance.result === 'success' && needs.code-cleanup.result === 'success' && needs.documentation-maintenance.result === 'success' && needs.performance-maintenance.result === 'success' && needs.security-maintenance.result === 'success' ? 'üü¢ **Maintenance Complete** - All maintenance tasks completed successfully' : 'üü° **Maintenance Issues** - Some maintenance tasks failed' }}

            ### Next Steps
            - Review individual maintenance reports
            - Address any identified issues
            - Schedule next maintenance cycle
            - Update maintenance procedures
            - Monitor maintenance effectiveness

            ---
            *This advanced maintenance summary was automatically generated.*`;

            // Create a discussion with the maintenance summary
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Advanced Maintenance Summary - ${new Date().toLocaleDateString()}`,
              body: summary,
              category: 'maintenance'
            });

            console.log('Advanced maintenance summary generated successfully');

      - name: Alert on maintenance issues
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            const alert = `üö® **Maintenance Issues Alert**

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Failed Maintenance Tasks
            ${{ needs.dependency-maintenance.result !== 'success' ? '- Dependency maintenance failed' : '' }}
            ${{ needs.code-cleanup.result !== 'success' ? '- Code cleanup failed' : '' }}
            ${{ needs.documentation-maintenance.result !== 'success' ? '- Documentation maintenance failed' : '' }}
            ${{ needs.performance-maintenance.result !== 'success' ? '- Performance maintenance failed' : '' }}
            ${{ needs.security-maintenance.result !== 'success' ? '- Security maintenance failed' : '' }}

            ### Details
            - **Repository:** ${{ github.repository }}
            - **Run ID:** ${{ github.run_id }}
            - **Maintenance Level:** ${{ github.event.inputs.maintenance_level || 'standard' }}
            - **Maintenance Type:** ${{ github.event.inputs.maintenance_type || 'all' }}

            üîó [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *This is an automated maintenance issues alert.*`;

            // You can add Slack/Discord webhook notifications here
            console.log(`Maintenance issues alert: ${alert}`);

            // Create an issue for maintenance failures
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Maintenance Issues Alert - ${new Date().toLocaleDateString()}`,
              body: alert,
              labels: ['maintenance', 'priority: high']
            });
