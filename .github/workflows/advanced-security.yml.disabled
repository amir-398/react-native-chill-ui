name: Advanced Security

on:
  schedule:
    # Run security checks daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, develop, tests-branch]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      security_scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - code
          - secrets
          - infrastructure
          - compliance
      severity_threshold:
        description: 'Minimum severity level to report'
        required: false
        default: 'medium'
        type: choice
        options:
          - low
          - medium
          - high
          - critical

jobs:
  dependency-security-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.security_scan_type == 'all' || github.event.inputs.security_scan_type == 'dependencies'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Run security audit
        id: security-audit
        run: |
          echo "Running security audit..."

          cd chill-ui-core

          # Run security audit
          if bun audit --audit-level moderate; then
            echo "security-audit-status=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ Security audit passed"
          else
            echo "security-audit-status=failed" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Security audit failed"
          fi

      - name: Check for known vulnerabilities
        id: vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."

          cd chill-ui-core

          # Check for known vulnerabilities
          vulnerabilities=$(bun audit --json 2>/dev/null || echo "[]")
          vulnerability_count=$(echo "$vulnerabilities" | jq length)

          echo "vulnerability-count=$vulnerability_count" >> $GITHUB_OUTPUT

          # Count vulnerabilities by severity
          critical_count=$(echo "$vulnerabilities" | jq '[.[] | select(.severity == "critical")] | length')
          high_count=$(echo "$vulnerabilities" | jq '[.[] | select(.severity == "high")] | length')
          moderate_count=$(echo "$vulnerabilities" | jq '[.[] | select(.severity == "moderate")] | length')
          low_count=$(echo "$vulnerabilities" | jq '[.[] | select(.severity == "low")] | length')

          echo "critical-count=$critical_count" >> $GITHUB_OUTPUT
          echo "high-count=$high_count" >> $GITHUB_OUTPUT
          echo "moderate-count=$moderate_count" >> $GITHUB_OUTPUT
          echo "low-count=$low_count" >> $GITHUB_OUTPUT

          if [ "$vulnerability_count" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $vulnerability_count security vulnerabilities:"
            echo "  - Critical: $critical_count"
            echo "  - High: $high_count"
            echo "  - Moderate: $moderate_count"
            echo "  - Low: $low_count"
          else
            echo "‚úÖ No security vulnerabilities found"
          fi

      - name: Check for license compliance
        run: |
          echo "Checking for license compliance..."

          cd chill-ui-core

          # Check for problematic licenses
          problematic_licenses=("GPL" "AGPL" "LGPL" "Copyleft")
          license_issues=0

          for license in "${problematic_licenses[@]}"; do
            if grep -r -i "$license" node_modules/ --include="package.json" | grep -q "license"; then
              echo "‚ö†Ô∏è Found potentially problematic license: $license"
              license_issues=$((license_issues + 1))
            fi
          done

          echo "license-issues=$license_issues" >> $GITHUB_OUTPUT

          if [ "$license_issues" -eq 0 ]; then
            echo "‚úÖ License compliance check passed"
          else
            echo "‚ö†Ô∏è Found $license_issues license compliance issues"
          fi

      - name: Generate dependency security report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üîí Dependency Security Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Security Audit
            - **Status:** ${{ steps.security-audit.outputs.security-audit-status === 'passed' ? '‚úÖ Passed' : '‚ùå Failed' }}
            - **Total Vulnerabilities:** ${{ steps.vulnerabilities.outputs.vulnerability-count }}
            - **Critical:** ${{ steps.vulnerabilities.outputs.critical-count }}
            - **High:** ${{ steps.vulnerabilities.outputs.high-count }}
            - **Moderate:** ${{ steps.vulnerabilities.outputs.moderate-count }}
            - **Low:** ${{ steps.vulnerabilities.outputs.low-count }}
            - **License Issues:** ${{ steps.vulnerabilities.outputs.license-issues }}

            ### Security Status
            ${{ steps.vulnerabilities.outputs.critical-count > 0 || steps.vulnerabilities.outputs.high-count > 0 ? 'üî¥ **Critical** - High severity vulnerabilities detected' : steps.vulnerabilities.outputs.moderate-count > 0 ? 'üü° **Warning** - Moderate vulnerabilities detected' : 'üü¢ **Secure** - No significant vulnerabilities' }}

            ### Recommendations
            - Update vulnerable dependencies immediately
            - Review license compliance
            - Implement automated security scanning
            - Monitor security advisories
            - Use dependency pinning
            - Regular security audits

            ---
            *This dependency security report was automatically generated.*`;

            // Create a discussion with the security report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Dependency Security Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'security'
            });

            console.log('Dependency security report generated successfully');

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.security_scan_type == 'all' || github.event.inputs.security_scan_type == 'code'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Run ESLint security rules
        id: eslint-security
        run: |
          echo "Running ESLint security rules..."

          cd chill-ui-core

          # Run ESLint
          if bun run lint; then
            echo "eslint-security-status=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ ESLint security rules passed"
          else
            echo "eslint-security-status=failed" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è ESLint security rules failed"
          fi

      - name: Check for hardcoded secrets
        id: secrets-check
        run: |
          echo "Checking for hardcoded secrets..."

          # Check for common secret patterns
          secret_patterns=(
            "password.*=.*['\"][^'\"]{8,}['\"]"
            "api[_-]?key.*=.*['\"][^'\"]{8,}['\"]"
            "secret.*=.*['\"][^'\"]{8,}['\"]"
            "token.*=.*['\"][^'\"]{8,}['\"]"
            "private[_-]?key.*=.*['\"][^'\"]{8,}['\"]"
          )

          secrets_found=0

          for pattern in "${secret_patterns[@]}"; do
            if grep -r -i -E "$pattern" chill-ui-core/src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
              echo "‚ö†Ô∏è Potential hardcoded secret found with pattern: $pattern"
              secrets_found=$((secrets_found + 1))
            fi
          done

          echo "secrets-found=$secrets_found" >> $GITHUB_OUTPUT

          if [ "$secrets_found" -eq 0 ]; then
            echo "‚úÖ No hardcoded secrets found"
          else
            echo "‚ö†Ô∏è Found $secrets_found potential hardcoded secrets"
          fi

      - name: Check for unsafe functions
        run: |
          echo "Checking for unsafe functions..."

          # Check for unsafe functions
          unsafe_functions=(
            "eval"
            "Function"
            "setTimeout.*string"
            "setInterval.*string"
            "innerHTML"
            "outerHTML"
            "document.write"
          )

          unsafe_usage=0

          for func in "${unsafe_functions[@]}"; do
            if grep -r -i "$func" chill-ui-core/src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
              echo "‚ö†Ô∏è Potential unsafe function usage: $func"
              unsafe_usage=$((unsafe_usage + 1))
            fi
          done

          echo "unsafe-usage=$unsafe_usage" >> $GITHUB_OUTPUT

          if [ "$unsafe_usage" -eq 0 ]; then
            echo "‚úÖ No unsafe function usage found"
          else
            echo "‚ö†Ô∏è Found $unsafe_usage potential unsafe function usages"
          fi

      - name: Check for SQL injection patterns
        run: |
          echo "Checking for SQL injection patterns..."

          # Check for SQL injection patterns
          sql_patterns=(
            "SELECT.*\\+"
            "INSERT.*\\+"
            "UPDATE.*\\+"
            "DELETE.*\\+"
            "DROP.*\\+"
          )

          sql_injection=0

          for pattern in "${sql_patterns[@]}"; do
            if grep -r -i -E "$pattern" chill-ui-core/src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
              echo "‚ö†Ô∏è Potential SQL injection pattern: $pattern"
              sql_injection=$((sql_injection + 1))
            fi
          done

          echo "sql-injection=$sql_injection" >> $GITHUB_OUTPUT

          if [ "$sql_injection" -eq 0 ]; then
            echo "‚úÖ No SQL injection patterns found"
          else
            echo "‚ö†Ô∏è Found $sql_injection potential SQL injection patterns"
          fi

      - name: Generate code security report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üîç Code Security Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Code Security Status
            - **ESLint Security Rules:** ${{ steps.eslint-security.outputs.eslint-security-status === 'passed' ? '‚úÖ Passed' : '‚ùå Failed' }}
            - **Hardcoded Secrets:** ${{ steps.secrets-check.outputs.secrets-found }}
            - **Unsafe Functions:** ${{ steps.secrets-check.outputs.unsafe-usage }}
            - **SQL Injection Patterns:** ${{ steps.secrets-check.outputs.sql-injection }}

            ### Security Status
            ${{ steps.secrets-check.outputs.secrets-found > 0 || steps.secrets-check.outputs.unsafe-usage > 0 || steps.secrets-check.outputs.sql-injection > 0 ? 'üî¥ **Critical** - Security vulnerabilities detected in code' : 'üü¢ **Secure** - No security vulnerabilities in code' }}

            ### Recommendations
            - Remove hardcoded secrets
            - Replace unsafe functions
            - Fix SQL injection patterns
            - Implement secure coding practices
            - Use parameterized queries
            - Regular security code reviews

            ---
            *This code security report was automatically generated.*`;

            // Create a discussion with the code security report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Code Security Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'security'
            });

            console.log('Code security report generated successfully');

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.security_scan_type == 'all' || github.event.inputs.security_scan_type == 'secrets'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Scan for secrets
        id: secrets-scan
        run: |
          echo "Scanning for secrets..."

          # Check for common secret patterns
          secret_patterns=(
            "password.*=.*['\"][^'\"]{8,}['\"]"
            "api[_-]?key.*=.*['\"][^'\"]{8,}['\"]"
            "secret.*=.*['\"][^'\"]{8,}['\"]"
            "token.*=.*['\"][^'\"]{8,}['\"]"
            "private[_-]?key.*=.*['\"][^'\"]{8,}['\"]"
            "access[_-]?key.*=.*['\"][^'\"]{8,}['\"]"
            "auth[_-]?token.*=.*['\"][^'\"]{8,}['\"]"
            "bearer.*=.*['\"][^'\"]{8,}['\"]"
          )

          secrets_found=0

          for pattern in "${secret_patterns[@]}"; do
            if grep -r -i -E "$pattern" . --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --include="*.json" --include="*.env*" --exclude-dir=node_modules --exclude-dir=.git; then
              echo "‚ö†Ô∏è Potential secret found with pattern: $pattern"
              secrets_found=$((secrets_found + 1))
            fi
          done

          echo "secrets-found=$secrets_found" >> $GITHUB_OUTPUT

          if [ "$secrets_found" -eq 0 ]; then
            echo "‚úÖ No secrets found"
          else
            echo "‚ö†Ô∏è Found $secrets_found potential secrets"
          fi

      - name: Check for environment files
        run: |
          echo "Checking for environment files..."

          # Check for environment files
          env_files=(
            ".env"
            ".env.local"
            ".env.development"
            ".env.production"
            ".env.test"
          )

          env_files_found=0

          for env_file in "${env_files[@]}"; do
            if [ -f "$env_file" ]; then
              echo "‚ö†Ô∏è Environment file found: $env_file"
              env_files_found=$((env_files_found + 1))
            fi
          done

          echo "env-files-found=$env_files_found" >> $GITHUB_OUTPUT

          if [ "$env_files_found" -eq 0 ]; then
            echo "‚úÖ No environment files found"
          else
            echo "‚ö†Ô∏è Found $env_files_found environment files"
          fi

      - name: Generate secrets report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üîê Secrets Scan Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Secrets Status
            - **Secrets Found:** ${{ steps.secrets-scan.outputs.secrets-found }}
            - **Environment Files:** ${{ steps.secrets-scan.outputs.env-files-found }}

            ### Security Status
            ${{ steps.secrets-scan.outputs.secrets-found > 0 || steps.secrets-scan.outputs.env-files-found > 0 ? 'üî¥ **Critical** - Secrets or environment files detected' : 'üü¢ **Secure** - No secrets or environment files found' }}

            ### Recommendations
            - Remove hardcoded secrets
            - Use environment variables
            - Implement secret management
            - Use GitHub Secrets
            - Regular secrets scanning
            - Secure configuration management

            ---
            *This secrets scan report was automatically generated.*`;

            // Create a discussion with the secrets report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Secrets Scan Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'security'
            });

            console.log('Secrets scan report generated successfully');

  infrastructure-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    if: github.event.inputs.security_scan_type == 'all' || github.event.inputs.security_scan_type == 'infrastructure'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Check GitHub Actions security
        id: github-actions-security
        run: |
          echo "Checking GitHub Actions security..."

          # Check for security issues in workflows
          security_issues=0

          # Check for hardcoded secrets in workflows
          if grep -r -i "password\|secret\|token\|key" .github/workflows/ --include="*.yml" --include="*.yaml"; then
            echo "‚ö†Ô∏è Potential hardcoded secrets in workflows"
            security_issues=$((security_issues + 1))
          fi

          # Check for unsafe permissions
          if grep -r -i "permissions:" .github/workflows/ --include="*.yml" --include="*.yaml"; then
            echo "‚ö†Ô∏è Check workflow permissions"
            security_issues=$((security_issues + 1))
          fi

          echo "security-issues=$security_issues" >> $GITHUB_OUTPUT

          if [ "$security_issues" -eq 0 ]; then
            echo "‚úÖ No GitHub Actions security issues found"
          else
            echo "‚ö†Ô∏è Found $security_issues potential GitHub Actions security issues"
          fi

      - name: Check package.json security
        run: |
          echo "Checking package.json security..."

          cd chill-ui-core

          # Check for security issues in package.json
          security_issues=0

          # Check for unsafe scripts
          if grep -q "rm -rf\|sudo\|chmod 777" package.json; then
            echo "‚ö†Ô∏è Potential unsafe scripts in package.json"
            security_issues=$((security_issues + 1))
          fi

          # Check for unsafe dependencies
          if grep -q "eval\|Function" package.json; then
            echo "‚ö†Ô∏è Potential unsafe dependencies in package.json"
            security_issues=$((security_issues + 1))
          fi

          echo "package-security-issues=$security_issues" >> $GITHUB_OUTPUT

          if [ "$security_issues" -eq 0 ]; then
            echo "‚úÖ No package.json security issues found"
          else
            echo "‚ö†Ô∏è Found $security_issues potential package.json security issues"
          fi

      - name: Generate infrastructure security report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üèóÔ∏è Infrastructure Security Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Infrastructure Security Status
            - **GitHub Actions Security:** ${{ steps.github-actions-security.outputs.security-issues }}
            - **Package.json Security:** ${{ steps.github-actions-security.outputs.package-security-issues }}

            ### Security Status
            ${{ steps.github-actions-security.outputs.security-issues > 0 || steps.github-actions-security.outputs.package-security-issues > 0 ? 'üî¥ **Critical** - Infrastructure security issues detected' : 'üü¢ **Secure** - No infrastructure security issues' }}

            ### Recommendations
            - Review GitHub Actions permissions
            - Remove hardcoded secrets from workflows
            - Audit package.json scripts
            - Implement least privilege principle
            - Regular infrastructure security reviews
            - Use secure configuration management

            ---
            *This infrastructure security report was automatically generated.*`;

            // Create a discussion with the infrastructure security report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Infrastructure Security Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'security'
            });

            console.log('Infrastructure security report generated successfully');

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    if: github.event.inputs.security_scan_type == 'all' || github.event.inputs.security_scan_type == 'compliance'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Check security policies
        id: security-policies
        run: |
          echo "Checking security policies..."

          # Check for security policy files
          security_files=(
            "SECURITY.md"
            ".github/SECURITY.md"
            "security.md"
          )

          security_files_found=0

          for file in "${security_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Security policy file found: $file"
              security_files_found=$((security_files_found + 1))
            fi
          done

          echo "security-files-found=$security_files_found" >> $GITHUB_OUTPUT

          if [ "$security_files_found" -eq 0 ]; then
            echo "‚ö†Ô∏è No security policy files found"
          else
            echo "‚úÖ Found $security_files_found security policy files"
          fi

      - name: Check code of conduct
        run: |
          echo "Checking code of conduct..."

          # Check for code of conduct files
          coc_files=(
            "CODE_OF_CONDUCT.md"
            ".github/CODE_OF_CONDUCT.md"
            "code_of_conduct.md"
          )

          coc_files_found=0

          for file in "${coc_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Code of conduct file found: $file"
              coc_files_found=$((coc_files_found + 1))
            fi
          done

          echo "coc-files-found=$coc_files_found" >> $GITHUB_OUTPUT

          if [ "$coc_files_found" -eq 0 ]; then
            echo "‚ö†Ô∏è No code of conduct files found"
          else
            echo "‚úÖ Found $coc_files_found code of conduct files"
          fi

      - name: Check contributing guidelines
        run: |
          echo "Checking contributing guidelines..."

          # Check for contributing files
          contributing_files=(
            "CONTRIBUTING.md"
            ".github/CONTRIBUTING.md"
            "contributing.md"
          )

          contributing_files_found=0

          for file in "${contributing_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Contributing guidelines file found: $file"
              contributing_files_found=$((contributing_files_found + 1))
            fi
          done

          echo "contributing-files-found=$contributing_files_found" >> $GITHUB_OUTPUT

          if [ "$contributing_files_found" -eq 0 ]; then
            echo "‚ö†Ô∏è No contributing guidelines files found"
          else
            echo "‚úÖ Found $contributing_files_found contributing guidelines files"
          fi

      - name: Generate compliance report
        uses: actions/github-script@v7
        with:
          script: |
            const report = `## üìã Compliance Report

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Compliance Status
            - **Security Policies:** ${{ steps.security-policies.outputs.security-files-found }}
            - **Code of Conduct:** ${{ steps.security-policies.outputs.coc-files-found }}
            - **Contributing Guidelines:** ${{ steps.security-policies.outputs.contributing-files-found }}

            ### Compliance Status
            ${{ steps.security-policies.outputs.security-files-found > 0 && steps.security-policies.outputs.coc-files-found > 0 && steps.security-policies.outputs.contributing-files-found > 0 ? 'üü¢ **Compliant** - All required policies present' : 'üü° **Non-Compliant** - Missing required policies' }}

            ### Recommendations
            - Add missing security policies
            - Implement code of conduct
            - Create contributing guidelines
            - Regular compliance reviews
            - Policy updates and maintenance
            - Compliance monitoring

            ---
            *This compliance report was automatically generated.*`;

            // Create a discussion with the compliance report
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Compliance Report - ${new Date().toLocaleDateString()}`,
              body: report,
              category: 'security'
            });

            console.log('Compliance report generated successfully');

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-security-scan, code-security-scan, secrets-scan, infrastructure-security, compliance-check]
    if: always()

    steps:
      - name: Generate security summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## üîí Advanced Security Summary

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Security Scan Results
            - **Dependency Security:** ${{ needs.dependency-security-scan.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Code Security:** ${{ needs.code-security-scan.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Secrets Scan:** ${{ needs.secrets-scan.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Infrastructure Security:** ${{ needs.infrastructure-security.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}
            - **Compliance Check:** ${{ needs.compliance-check.result === 'success' ? '‚úÖ Completed' : '‚ùå Failed' }}

            ### Overall Security Status
            ${{ needs.dependency-security-scan.result === 'success' && needs.code-security-scan.result === 'success' && needs.secrets-scan.result === 'success' && needs.infrastructure-security.result === 'success' && needs.compliance-check.result === 'success' ? 'üü¢ **Secure** - All security checks passed' : 'üü° **Attention Required** - Some security checks failed' }}

            ### Next Steps
            - Review individual security reports
            - Address any identified vulnerabilities
            - Update security policies
            - Implement recommended security measures
            - Schedule regular security reviews

            ---
            *This advanced security summary was automatically generated.*`;

            // Create a discussion with the security summary
            await github.rest.discussions.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Advanced Security Summary - ${new Date().toLocaleDateString()}`,
              body: summary,
              category: 'security'
            });

            console.log('Advanced security summary generated successfully');

      - name: Alert on critical security issues
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            const alert = `üö® **Critical Security Alert**

            **Date:** ${new Date().toLocaleDateString()}
            **Time:** ${new Date().toLocaleTimeString()}

            ### Failed Security Checks
            ${{ needs.dependency-security-scan.result !== 'success' ? '- Dependency security scan failed' : '' }}
            ${{ needs.code-security-scan.result !== 'success' ? '- Code security scan failed' : '' }}
            ${{ needs.secrets-scan.result !== 'success' ? '- Secrets scan failed' : '' }}
            ${{ needs.infrastructure-security.result !== 'success' ? '- Infrastructure security check failed' : '' }}
            ${{ needs.compliance-check.result !== 'success' ? '- Compliance check failed' : '' }}

            ### Details
            - **Repository:** ${{ github.repository }}
            - **Run ID:** ${{ github.run_id }}

            üîó [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ---
            *This is an automated critical security alert.*`;

            // You can add Slack/Discord webhook notifications here
            console.log(`Critical security alert: ${alert}`);

            // Create an issue for critical security failures
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Critical Security Alert - ${new Date().toLocaleDateString()}`,
              body: alert,
              labels: ['security', 'priority: critical']
            });
