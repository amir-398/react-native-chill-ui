name: Check Documentation

on:
  push:
    branches: [main, develop, staging]
    paths:
      - 'chill-ui-core/src/components/**/*.tsx'
      - 'chill-ui-core/stories/**/*.tsx'
  pull_request:
    branches: [main, develop, staging]
    paths:
      - 'chill-ui-core/src/components/**/*.tsx'
      - 'chill-ui-core/stories/**/*.tsx'

jobs:
  docs-validation:
    name: Validate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            chill-ui-core/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('chill-ui-core/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd chill-ui-core
          bun install --frozen-lockfile

      - name: Check components documentation and stories
        id: check-docs
        run: |
          cd chill-ui-core
          bun run check:components-docs
        continue-on-error: true

      - name: Generate documentation report
        if: always()
        run: |
          cd chill-ui-core
          bun run check:components:report
        continue-on-error: true

      - name: Upload documentation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-report-${{ github.run_number }}
          path: |
            component-check-report.json
          retention-days: 30

      - name: Comment on PR with results
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let reportContent = '';

            try {
              if (fs.existsSync('component-check-report.json')) {
                const report = JSON.parse(fs.readFileSync('component-check-report.json', 'utf8'));
                const componentsWithIssues = report.components.filter(c => 
                  c.readme.issues.length > 0 || c.story.issues.length > 0 || c.structure.issues.length > 0
                );
                
                if (componentsWithIssues.length > 0) {
                  reportContent = '## üìã Documentation Issues Found\n\n';
                  reportContent += `Found issues in ${componentsWithIssues.length} out of ${report.totalComponents} components:\n\n`;
                  
                  componentsWithIssues.forEach(component => {
                    const allIssues = [...component.readme.issues, ...component.story.issues, ...component.structure.issues];
                    reportContent += `### ${component.name}\n`;
                    allIssues.forEach(issue => {
                      reportContent += `- ‚ö†Ô∏è ${issue}\n`;
                    });
                    reportContent += '\n';
                  });
                }
              }
            } catch (error) {
              reportContent = '## üìã Documentation Check Failed\n\nUnable to generate detailed report.';
            }

            if (reportContent) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportContent
              });
            }

      - name: Fail if documentation check failed
        if: steps.check-docs.outcome == 'failure'
        run: |
          echo "‚ùå Documentation validation failed. Please check the issues above and fix them."
          exit 1
